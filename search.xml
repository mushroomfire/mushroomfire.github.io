<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lammps Cmake安装记录</title>
      <link href="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/"/>
      <url>/2023/11/15/lammps-cmake-an-zhuang-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="这篇文章记录使用Cmake安装Lammps过程"><a href="#这篇文章记录使用Cmake安装Lammps过程" class="headerlink" title="这篇文章记录使用Cmake安装Lammps过程"></a>这篇文章记录使用Cmake安装Lammps过程</h2><h3 id="目标编译的包"><a href="#目标编译的包" class="headerlink" title="目标编译的包"></a>目标编译的包</h3><ul><li>mpi并行</li><li>kokkos</li><li>GPU</li><li>Voronoi</li><li>Reaxff</li></ul><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li>win11下的wsl2，ubuntu 22.04</li></ul><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li>sudo apt update</li><li>sudo apt upgrade</li></ul><h3 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake build-essential \</span><br><span class="line">                 ccache gfortran openmpi-bin libopenmpi-dev \</span><br><span class="line">                 libfftw3-dev libblas-dev liblapack-dev</span><br></pre></td></tr></table></figure><h3 id="安装lammps"><a href="#安装lammps" class="headerlink" title="安装lammps"></a>安装lammps</h3><ul><li><p>此处我们下载stable版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.lammps.org/tars/lammps-stable.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf lammps-stable.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入lammps目录，建立build文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> lammps-2Aug2023/ &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br></pre></td></tr></table></figure></li></ul><h3 id="编译Lammps"><a href="#编译Lammps" class="headerlink" title="编译Lammps"></a>编译Lammps</h3><ul><li><p>首先我们测试编译最基础的部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -C ../cmake/presets/basic.cmake ../cmake</span><br></pre></td></tr></table></figure></li><li><p>生成makefile<br><img src="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/image-2.png" alt="Alt text"><br>这里有几个重点可以看见，比如FFMPEG这个依赖我们没有安装，所以没有找到，这个依赖主要适用于一些图片，动画的处理，对于我们来说是不需要的，所以不需要安装，下面显示我们需要安装的有openmpi, MPI, FFTW。这些都是计算相关的，是我们需要注意的。</p></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j 8</span><br></pre></td></tr></table></figure><p>这一步是实际编译过程，-j 8代表使用8个核来编译。</p></li><li><p>测试<br>编译完成以后文件夹下就会生成一个可执行文件 <strong>lmp</strong>,使用这个便可以进行计算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ../examples/melt/in.melt .</span><br><span class="line">mpirun -np 8 ./lmp -<span class="keyword">in</span> in.melt</span><br></pre></td></tr></table></figure><p>瞬间就完成了计算<br><img src="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/image-3.png" alt="Alt text"></p></li></ul><h3 id="个别库的安装"><a href="#个别库的安装" class="headerlink" title="个别库的安装"></a>个别库的安装</h3><p>实际上到这里并行版本的lammps安装已经完成了，但是lammps包含了很多额外的库，很多是需要手动安装的，接下来我们来安装几个常用的库。</p><ul><li>使用cmake编译不要和老版本的make安装混用，如果之前使用过make machine这样的方式，需要使用make no-all purge来卸载掉所有文件，需要保持src目录干净。</li></ul><h3 id="安装GPU驱动"><a href="#安装GPU驱动" class="headerlink" title="安装GPU驱动"></a>安装GPU驱动</h3><ul><li>在windows环境更新显卡驱动，<strong>不要在wsl2环境再次安装驱动</strong>。</li><li>使用nvidia-smi检查显卡驱动版本<br><img src="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/image.png" alt="Alt text"></li><li><p>在wsl2中安装cudatool-kit,和驱动版本保持一致，我这里是12.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.1.0/local_installers/cuda_12.1.0_530.30.02_linux.run </span><br><span class="line"></span><br><span class="line">sudo sh cuda_12.1.0_530.30.02_linux.run</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/cuda-12.1/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/lib/wsl/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure></li><li><p>检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><p><img src="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/image-1.png" alt="Alt text"></p></li><li><p>编译GPU，Kokkos，Reaxff，VORONOI</p><p>修改../cmake/kokkos-cuda.cmake中的ARCH为ADA89 (40系列显卡都是这个架构)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># preset that enables KOKKOS and selects CUDA compilation with OpenMP</span></span><br><span class="line"><span class="comment"># enabled as well. This preselects CC 5.0 as default GPU arch, since</span></span><br><span class="line"><span class="comment"># that is compatible with all higher CC, but not the default CC 3.5</span></span><br><span class="line"><span class="built_in">set</span>(PKG_KOKKOS ON CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br><span class="line"><span class="built_in">set</span>(Kokkos_ENABLE_SERIAL ON CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br><span class="line"><span class="built_in">set</span>(Kokkos_ENABLE_CUDA   ON CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br><span class="line"><span class="built_in">set</span>(Kokkos_ARCH_ADA89 ON CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br><span class="line"><span class="built_in">set</span>(BUILD_OMP ON CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hide deprecation warnings temporarily for stable release</span></span><br><span class="line"><span class="built_in">set</span>(Kokkos_ENABLE_DEPRECATION_WARNINGS OFF CACHE BOOL <span class="string">&quot;&quot;</span> FORCE)</span><br></pre></td></tr></table></figure><p>Cmake命令如下：<br>这里GPU_ARCH数字可以在<a href="https://en.wikipedia.org/wiki/CUDA#GPUs_supported">这里查看</a>，我是4060，对应就是sm_89.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -C ../cmake/presets/basic.cmake -C ../cmake/presets/kokkos-cuda.cmake -D PKG_GPU=on -D GPU_API=cuda -D GPU_ARCH=sm_89 -D PKG_VORONOI=on -D DOWNLOAD_VORO=<span class="built_in">yes</span> -D PKG_REAXFF=on -D PKG_OPENMP=<span class="built_in">yes</span> ../cmake</span><br></pre></td></tr></table></figure><p>简单解释一下cmake命令，lammps中包含了很多的库，对于不需要额外依赖或者设置的库，比如REAXFF，只需要添加 -D PKG_REAXFF=on 就行了，对于其他的库，则可能需要添加不同的输入参数，具体可以在<a href="https://docs.lammps.org/Build_package.html">这里查看</a>。</p><p>接下来就是很尴尬的一点，因为笔记本内存只有16G，且wsl2似乎内存管理很不好，我只能单核编译，需要很久，内存小，没办法，只能等着。<br>如果你内存32G往上，可以尝试make -j 4，我在另外一台ubuntu (124 G内存)上编译，开启-j 8，很快就编译好了。<strong>当然，如果不编译kokkos包的话，编译其他的还是可以随便-j 8 跑的，这样速度就很快了，从我测试结果来看，笔记本是很不适合安装kokkos的。</strong></p><p>还有一个很大的坑，如果现在直接编译，经过漫长的等待以后，会显示报错：</p><p><img src="/2023/11/15/lammps-cmake-an-zhuang-ji-lu/error.png" alt="Alt text"></p><p>这个问题和kokkos包编译直接相关，我一开始看见网上说把第一个-C去掉，就不会显示这个报错了，我就测试了一下，经过漫长的编译以后，确实不报错了，但是基础的包比如MANYBODY也没有编译呀，当你再想编译的时候，又会继续报错。</p><p>然后我就想着应该是cufft这个lib没有找到，我一开始尝试把路径添加进去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure><p>逻辑上感觉是可以的，但是还是不行。</p><p>然后我尝试了一下软连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/cuda-12.1/lib64/libcufft.so /usr/lib/libcufft.so</span><br></pre></td></tr></table></figure><p>再次编译，这下<strong>终于OK了</strong>。</p><p>但是，我还要说但是，我在我原生的UBUNTU电脑上测试，根本不需要这个步骤，直接make -j 8很快就OK了，所以这wsl2？？？？算了，接下来简单跑跑测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ul><li><p>这里跑一个eam的例子。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ../potentials/Cu_zhou.eam.alloy .</span><br></pre></td></tr></table></figure></li><li><p>gpu.in文件内容如下</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dimension 3</span><br><span class="line">boundary p p p</span><br><span class="line">atom_style atomic</span><br><span class="line">units metal</span><br><span class="line"></span><br><span class="line">lattice fcc 3.615</span><br><span class="line">region 1 block 0 50 0 50 0 50</span><br><span class="line">create_box 1 1</span><br><span class="line">create_atoms 1 box</span><br><span class="line"></span><br><span class="line">pair_style eam/alloy</span><br><span class="line">pair_coeff * * Cu_zhou.eam.alloy Cu</span><br><span class="line"></span><br><span class="line">thermo 100</span><br><span class="line"></span><br><span class="line">fix 1 all nve</span><br><span class="line"></span><br><span class="line">run 500</span><br></pre></td></tr></table></figure></li><li><p>测试了mpi并行和GPU加速和kokkos-GPU加速，计算命令如下：</p><p>  MPI并行</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpirun -np 16 ./lmp -<span class="keyword">in</span> gpu.in</span><br></pre></td></tr></table></figure><p>  GPU加速</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./lmp -<span class="keyword">in</span> gpu.in -sf gpu -pk gpu 1</span><br></pre></td></tr></table></figure><p>  kokkos-GPU</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./lmp -<span class="keyword">in</span> gpu.in -k on g 1 -sf kk</span><br></pre></td></tr></table></figure><p>对于这个50w铜原子体系，16核CPU并行速度为0.545 ns/day；要知道7945hx已经是笔记本上最强的CPU了。GPU包加速跑出了2.95 ns/day的成绩；GPU包果然名不虚传，4060这计算性能也不错。而且实际上如果把thermo的频率降低的话还能计算更快，让更多的数据跑在GPU上，减少和CPU的数据传输就能提高计算速度。可是kokkos-GPU加速就很拉跨了，才0.579 ns/day, 有可能因为4060的双精度计算能力太拉了，kokkos只支持双精度目前，GPU则是在混合精度跑的。</p><p>当体系增大到200w原子后，kokkos-GPU显存占用5.4G，速度为0.145 ns/day。此时GPU包直接使用则会爆显存 (4060 显存8G还是不够看呀)，于是我额外设置了neigh no,这样neighbor list就会在CPU端完成，当需要频繁更新邻域时候这样会降低计算效率，但是好处是可以节约显存，对于这个案例由于不需要更新邻域，所以在设置neigh no以后，显存占用降低到5.2G，计算速度依然保持在很高的0.61 ns/day, 吊打kokkos，遥遥领先！还有一点，在输出时候，kokkos中的Modify这一项居然高达60%，这应该是很不合理的，但是还没有找到在哪里设置。16核MPI并行速度为0.134 ns/day，确实弟中弟。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最近LAMMPS一直在推Cmake安装，确实简单了许多，很多库的安装也会流程化，虽然可能会遇见一些bug，但是这条路远比之前的make安装方便了许多。</p>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分子动力学 </tag>
            
            <tag> 程序安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo迁徙以及新建git仓库</title>
      <link href="/2022/11/27/hexo-qian-xi-yi-ji-xin-jian-git-cang-ku/"/>
      <url>/2022/11/27/hexo-qian-xi-yi-ji-xin-jian-git-cang-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo迁徙"><a href="#hexo迁徙" class="headerlink" title="hexo迁徙"></a>hexo迁徙</h2><ol><li>设置git<ul><li>git config —global user.name username</li><li>git config —global user.email email@qq.com</li><li>ssh-keygen -t rsa -C email@qq.com</li><li>eval $(ssh-agent -s)</li><li>ssh-add C:/Users/herrwu/.ssh/id_rsa</li><li>clip &lt; C:/Users/herrwu/.ssh/id_rsa.pub</li><li>添加ssh密钥在github的setting里面</li><li>ssh -T git@github.com</li></ul></li><li><p>建立git仓库</p><ul><li>git init</li><li>git add .</li><li>git commit -m “first commit”</li><li>git branch -M master</li><li>git remote add origin <a href="https://github.com/mushroomfire/MyBlog.git">https://github.com/mushroomfire/MyBlog.git</a></li><li>git push -u origin master</li><li>默认不更新某些文件</li><li>git rm —cached . 去除追踪记忆</li><li>在.gitignore文件中添加需要忽略的文件或者文件夹 </li><li>同步远程和本地仓库</li><li>git remote -v</li><li>git fetch origin master</li><li>git log master.. origin/master</li><li>git merge origin/master # 合并</li></ul></li><li><p>安装git, npm, node</p></li><li><p>安装hexo</p><ul><li>保留文件如下：<ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/</li></ul></li><li>npm install -g hexo</li><li>npm install —force</li><li>npm install hexo-deployer-git -save</li><li>rm -rf .deploy_git</li></ul></li><li><p>生成文章并提交</p><ul><li>hexo n file</li><li>hexo cl</li><li>hexo g</li><li>hexo s 查看</li><li>hexo d 上传</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mdapy使用说明</title>
      <link href="/2022/09/10/mdapy-shi-yong-shuo-ming/"/>
      <url>/2022/09/10/mdapy-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="使用说明更新"><a href="#使用说明更新" class="headerlink" title="使用说明更新"></a>使用说明更新</h1><h1 id="本库的基本用法"><a href="#本库的基本用法" class="headerlink" title="本库的基本用法"></a>本库的基本用法</h1><h2 id="目前主要包含以下几个功能"><a href="#目前主要包含以下几个功能" class="headerlink" title="目前主要包含以下几个功能"></a>目前主要包含以下几个功能</h2><ul><li>计算原子温度</li><li>计算原子结构熵</li><li>计算中心对称参数</li><li>建立简单晶体模型</li><li>建立原子近邻列表</li></ul><h2 id="导入必要的package"><a href="#导入必要的package" class="headerlink" title="导入必要的package"></a>导入必要的package</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mdapy <span class="keyword">as</span> mp <span class="comment"># 无特殊说明本库简写为 mp</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> taichi <span class="keyword">as</span> ti</span><br><span class="line">ti.init(arch=ti.cpu) <span class="comment">#arch=ti.cpu 使用CPU. # arch=ti.gpu, device_memory_GB=5. 使用GPU</span></span><br></pre></td></tr></table></figure><pre><code>[Taichi] version 1.1.2, llvm 10.0.0, commit f25cf4a2, win, python 3.7.3[Taichi] Starting on arch=x64</code></pre><h2 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp.__version__</span><br></pre></td></tr></table></figure><pre><code>&#39;0.4.0&#39;</code></pre><h2 id="读取一个系统"><a href="#读取一个系统" class="headerlink" title="读取一个系统"></a>读取一个系统</h2><p><a href="http://yunpan.mushroomfire.com/s/GzTv">可在此处下载example.dump文件</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system = mp.System(<span class="string">&#x27;example.dump&#x27;</span>) </span><br></pre></td></tr></table></figure><pre><code>Wall time: 2.96 s</code></pre><h2 id="查看系统数据"><a href="#查看系统数据" class="headerlink" title="查看系统数据"></a>查看系统数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>type</th>      <th>x</th>      <th>y</th>      <th>z</th>      <th>vx</th>      <th>vy</th>      <th>vz</th>      <th>c_1</th>      <th>c_2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>192295</td>      <td>3</td>      <td>-27.9096</td>      <td>42.0121</td>      <td>-22.2491</td>      <td>-2.35674</td>      <td>0.481940</td>      <td>-0.257686</td>      <td>5.06650</td>      <td>-3.71151</td>    </tr>    <tr>      <th>1</th>      <td>255932</td>      <td>5</td>      <td>-30.0338</td>      <td>43.2841</td>      <td>-22.1938</td>      <td>1.55510</td>      <td>-1.125920</td>      <td>-1.983760</td>      <td>5.16323</td>      <td>-3.69935</td>    </tr>    <tr>      <th>2</th>      <td>319374</td>      <td>2</td>      <td>-29.4179</td>      <td>42.0487</td>      <td>-20.1799</td>      <td>-1.56154</td>      <td>-0.105773</td>      <td>-1.052900</td>      <td>6.02419</td>      <td>-3.51732</td>    </tr>    <tr>      <th>3</th>      <td>383068</td>      <td>3</td>      <td>-27.3053</td>      <td>43.2945</td>      <td>-20.1681</td>      <td>1.75865</td>      <td>0.962938</td>      <td>-2.273980</td>      <td>5.15436</td>      <td>-3.90756</td>    </tr>    <tr>      <th>4</th>      <td>700644</td>      <td>2</td>      <td>-27.9671</td>      <td>44.5056</td>      <td>-22.1799</td>      <td>2.11749</td>      <td>-0.684720</td>      <td>-0.795077</td>      <td>6.15314</td>      <td>-3.85788</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2287143</th>      <td>1715363</td>      <td>1</td>      <td>329.5120</td>      <td>257.9240</td>      <td>323.0480</td>      <td>1.93039</td>      <td>1.215740</td>      <td>-1.869160</td>      <td>5.89311</td>      <td>-3.92515</td>    </tr>    <tr>      <th>2287144</th>      <td>1905765</td>      <td>5</td>      <td>327.2950</td>      <td>256.6070</td>      <td>318.9410</td>      <td>2.16960</td>      <td>-4.590730</td>      <td>1.395140</td>      <td>4.94041</td>      <td>-4.08289</td>    </tr>    <tr>      <th>2287145</th>      <td>1966370</td>      <td>3</td>      <td>329.5330</td>      <td>257.9350</td>      <td>318.9310</td>      <td>2.65692</td>      <td>-3.539740</td>      <td>-1.125020</td>      <td>5.70667</td>      <td>-3.83374</td>    </tr>    <tr>      <th>2287146</th>      <td>2030121</td>      <td>1</td>      <td>328.9320</td>      <td>256.6390</td>      <td>321.0620</td>      <td>1.25297</td>      <td>0.868006</td>      <td>1.104770</td>      <td>5.42057</td>      <td>-3.39951</td>    </tr>    <tr>      <th>2287147</th>      <td>2093740</td>      <td>5</td>      <td>326.7530</td>      <td>257.7980</td>      <td>320.8960</td>      <td>2.40437</td>      <td>-0.944472</td>      <td>3.358390</td>      <td>6.04798</td>      <td>-2.90699</td>    </tr>  </tbody></table><p>2287148 rows × 10 columns</p></div><h2 id="生成邻域列表"><a href="#生成邻域列表" class="headerlink" title="生成邻域列表"></a>生成邻域列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system.build_neighbor(rc=<span class="number">5.</span>, max_neigh=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><pre><code>Wall time: 3.82 s</code></pre><h2 id="计算中心对称参数"><a href="#计算中心对称参数" class="headerlink" title="计算中心对称参数"></a>计算中心对称参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system.cal_centro_symmetry_parameter(N=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><pre><code>Wall time: 8.7 s</code></pre><h2 id="计算原子构型熵"><a href="#计算原子构型熵" class="headerlink" title="计算原子构型熵"></a>计算原子构型熵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system.cal_atomic_entropy()</span><br></pre></td></tr></table></figure><pre><code>Wall time: 4.31 s</code></pre><h2 id="计算平均原子温度"><a href="#计算平均原子温度" class="headerlink" title="计算平均原子温度"></a>计算平均原子温度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system.cal_atomic_temperature(amass=np.array([<span class="number">58.933</span>, <span class="number">58.693</span>, <span class="number">55.847</span>, <span class="number">26.982</span>, <span class="number">63.546</span>]))</span><br></pre></td></tr></table></figure><pre><code>Wall time: 1.21 s</code></pre><h2 id="查看计算结果"><a href="#查看计算结果" class="headerlink" title="查看计算结果"></a>查看计算结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>id</th>      <th>type</th>      <th>x</th>      <th>y</th>      <th>z</th>      <th>vx</th>      <th>vy</th>      <th>vz</th>      <th>c_1</th>      <th>c_2</th>      <th>csp</th>      <th>atomic_entropy</th>      <th>atomic_temp</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>192295</td>      <td>3</td>      <td>-27.9096</td>      <td>42.0121</td>      <td>-22.2491</td>      <td>-2.35674</td>      <td>0.481940</td>      <td>-0.257686</td>      <td>5.06650</td>      <td>-3.71151</td>      <td>5.066506</td>      <td>-3.704394</td>      <td>271.311096</td>    </tr>    <tr>      <th>1</th>      <td>255932</td>      <td>5</td>      <td>-30.0338</td>      <td>43.2841</td>      <td>-22.1938</td>      <td>1.55510</td>      <td>-1.125920</td>      <td>-1.983760</td>      <td>5.16323</td>      <td>-3.69935</td>      <td>5.163225</td>      <td>-3.693706</td>      <td>244.521713</td>    </tr>    <tr>      <th>2</th>      <td>319374</td>      <td>2</td>      <td>-29.4179</td>      <td>42.0487</td>      <td>-20.1799</td>      <td>-1.56154</td>      <td>-0.105773</td>      <td>-1.052900</td>      <td>6.02419</td>      <td>-3.51732</td>      <td>6.024189</td>      <td>-3.511253</td>      <td>240.937302</td>    </tr>    <tr>      <th>3</th>      <td>383068</td>      <td>3</td>      <td>-27.3053</td>      <td>43.2945</td>      <td>-20.1681</td>      <td>1.75865</td>      <td>0.962938</td>      <td>-2.273980</td>      <td>5.15436</td>      <td>-3.90756</td>      <td>5.154361</td>      <td>-3.897303</td>      <td>230.167953</td>    </tr>    <tr>      <th>4</th>      <td>700644</td>      <td>2</td>      <td>-27.9671</td>      <td>44.5056</td>      <td>-22.1799</td>      <td>2.11749</td>      <td>-0.684720</td>      <td>-0.795077</td>      <td>6.15314</td>      <td>-3.85788</td>      <td>6.153219</td>      <td>-3.849362</td>      <td>243.981369</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>2287143</th>      <td>1715363</td>      <td>1</td>      <td>329.5120</td>      <td>257.9240</td>      <td>323.0480</td>      <td>1.93039</td>      <td>1.215740</td>      <td>-1.869160</td>      <td>5.89311</td>      <td>-3.92515</td>      <td>5.893107</td>      <td>-3.916707</td>      <td>260.688812</td>    </tr>    <tr>      <th>2287144</th>      <td>1905765</td>      <td>5</td>      <td>327.2950</td>      <td>256.6070</td>      <td>318.9410</td>      <td>2.16960</td>      <td>-4.590730</td>      <td>1.395140</td>      <td>4.94041</td>      <td>-4.08289</td>      <td>4.940413</td>      <td>-4.073879</td>      <td>320.674103</td>    </tr>    <tr>      <th>2287145</th>      <td>1966370</td>      <td>3</td>      <td>329.5330</td>      <td>257.9350</td>      <td>318.9310</td>      <td>2.65692</td>      <td>-3.539740</td>      <td>-1.125020</td>      <td>5.70667</td>      <td>-3.83374</td>      <td>5.706692</td>      <td>-3.825464</td>      <td>344.000671</td>    </tr>    <tr>      <th>2287146</th>      <td>2030121</td>      <td>1</td>      <td>328.9320</td>      <td>256.6390</td>      <td>321.0620</td>      <td>1.25297</td>      <td>0.868006</td>      <td>1.104770</td>      <td>5.42057</td>      <td>-3.39951</td>      <td>5.420572</td>      <td>-3.393086</td>      <td>241.169174</td>    </tr>    <tr>      <th>2287147</th>      <td>2093740</td>      <td>5</td>      <td>326.7530</td>      <td>257.7980</td>      <td>320.8960</td>      <td>2.40437</td>      <td>-0.944472</td>      <td>3.358390</td>      <td>6.04798</td>      <td>-2.90699</td>      <td>6.048002</td>      <td>-2.902135</td>      <td>245.842743</td>    </tr>  </tbody></table><p>2287148 rows × 13 columns</p></div><h2 id="查看平均温度"><a href="#查看平均温度" class="headerlink" title="查看平均温度"></a>查看平均温度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.data[<span class="string">&#x27;atomic_temp&#x27;</span>].mean() <span class="comment"># K</span></span><br></pre></td></tr></table></figure><pre><code>293.87168742301066</code></pre><h2 id="与LAMMPS计算结果进行对比"><a href="#与LAMMPS计算结果进行对比" class="headerlink" title="与LAMMPS计算结果进行对比"></a>与LAMMPS计算结果进行对比</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># csp 对比</span></span><br><span class="line">error = <span class="built_in">abs</span>(system.data[<span class="string">&#x27;c_1&#x27;</span>] - system.data[<span class="string">&#x27;csp&#x27;</span>])</span><br><span class="line">error[error&gt;<span class="number">0.1</span>], error.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure><pre><code>(Series([], dtype: float64), 0.0049196543884280075)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构型熵对比, 这里由于中间数值积分的地方我不清楚lammps的具体方式,结果数值上会有一些区别。</span></span><br><span class="line">error = <span class="built_in">abs</span>(system.data[<span class="string">&#x27;c_2&#x27;</span>] - system.data[<span class="string">&#x27;atomic_entropy&#x27;</span>])</span><br><span class="line">error[error&gt;<span class="number">0.1</span>], error.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure><pre><code>(Series([], dtype: float64), 0.08606090263366717)</code></pre><h2 id="保存计算结果到dump文件中"><a href="#保存计算结果到dump文件中" class="headerlink" title="保存计算结果到dump文件中"></a>保存计算结果到dump文件中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">system.write_dump() <span class="comment"># 生成一个新的dump文件</span></span><br></pre></td></tr></table></figure><pre><code>Wall time: 30.1 s</code></pre><h2 id="建立简单晶体结构"><a href="#建立简单晶体结构" class="headerlink" title="建立简单晶体结构"></a>建立简单晶体结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">FCC = mp.LatticeMaker(<span class="number">4.05</span>, <span class="string">&#x27;FCC&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">FCC.compute()</span><br></pre></td></tr></table></figure><pre><code>Wall time: 506 ms</code></pre><h2 id="保存为data格式"><a href="#保存为data格式" class="headerlink" title="保存为data格式"></a>保存为data格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">FCC.write_data()</span><br></pre></td></tr></table></figure><pre><code>Wall time: 3.23 s</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> mdapy </tag>
            
            <tag> Taichi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和香宝的下午时光</title>
      <link href="/2022/09/07/he-xiang-bao-de-xia-wu-shi-guang/"/>
      <url>/2022/09/07/he-xiang-bao-de-xia-wu-shi-guang/</url>
      
        <content type="html"><![CDATA[<h2 id="甜甜香宝"><a href="#甜甜香宝" class="headerlink" title="甜甜香宝"></a>甜甜香宝</h2><p>最近迷上听rap的香宝下午和我逛小花园之我的拍照技术嘎嘎上升，嘻嘻。</p><div class="fj-gallery"><p><img src="https://img.pterclub.com/images/2022/09/07/6ad2e7fa855c3892d873ff45846b48f.jpg" alt="6ad2e7fa855c3892d873ff45846b48f.jpg"><br><img src="https://img.pterclub.com/images/2022/09/07/bbf8420fd5fbae2c4d30c831d47ca07.jpg" alt="bbf8420fd5fbae2c4d30c831d47ca07.jpg"><br><img src="https://img.pterclub.com/images/2022/09/07/ad090732a1842ad6ace427fc93055c2.jpg" alt="ad090732a1842ad6ace427fc93055c2.jpg"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 恋爱生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
            <tag> 拍照技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶体建模加速版本</title>
      <link href="/2022/09/07/jing-ti-jian-mo-jia-su-ban-ben/"/>
      <url>/2022/09/07/jing-ti-jian-mo-jia-su-ban-ben/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="dcd7849c4ab9b4cbda97c7ebc9276fcee1ede7a2deb5bb776d25e10a4680ced7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Taichi </tag>
            
            <tag> private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冲击过程中波系图数据获取教程</title>
      <link href="/2022/09/01/chong-ji-guo-cheng-zhong-bo-xi-tu-shu-ju-huo-qu-jiao-cheng/"/>
      <url>/2022/09/01/chong-ji-guo-cheng-zhong-bo-xi-tu-shu-ju-huo-qu-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>分析冲击波在固体内部的传播有利于研究冲击波的作用以及材料的层裂强度，分子动力学中可以获取每一时刻的冲击波波形，包括其温度，压力，速度等信息，将所有时刻的波形压缩到一张图上，可以直观看出冲击波的传播状况以及分析材料的破坏情况。</p><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><ol><li>导入必要的库 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyAnalysis.binning.one_binning <span class="keyword">import</span> OneBinning</span><br><span class="line"><span class="keyword">from</span> pyAnalysis <span class="keyword">import</span> core</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure></li><li>计算所有时刻的波形 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getbin</span>(<span class="params">path, namelist, atype, outpath</span>):</span><br><span class="line">    <span class="keyword">if</span> atype == <span class="string">&#x27;Ni&#x27;</span>:</span><br><span class="line">        amass = [<span class="number">58.693400</span>]</span><br><span class="line">    <span class="keyword">elif</span> atype == <span class="string">&#x27;GraNi&#x27;</span>:</span><br><span class="line">        amass = [<span class="number">58.693400</span>, <span class="number">12.010700</span>]</span><br><span class="line">    rc = <span class="number">5.0</span></span><br><span class="line">    units = <span class="string">&#x27;metal&#x27;</span></span><br><span class="line">    max_neigh = <span class="number">50</span></span><br><span class="line">    num_threads = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> namelist:</span><br><span class="line">        filename = path + name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Calulating <span class="subst">&#123;filename&#125;</span>... Process id: <span class="subst">&#123;multiprocessing.current_process().name&#125;</span>&#x27;</span>)</span><br><span class="line">        system = core.build_system(filename, amass, rc, units, max_neigh, num_threads)</span><br><span class="line">        data = OneBinning(system.data, <span class="string">&#x27;x&#x27;</span>, <span class="number">5.0</span>, [<span class="string">&#x27;vx&#x27;</span>,<span class="string">&#x27;v_px&#x27;</span>])</span><br><span class="line">        data.to_csv(outpath+<span class="string">f&#x27;<span class="subst">&#123;name[:-<span class="number">5</span>]&#125;</span>.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li><li>将计算后的结果映射到二维矩阵 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getmatrix</span>(<span class="params">path, dump_list, interval=<span class="number">0.5</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Transform 1D to 2D matrix...&#x27;</span>)</span><br><span class="line">    row = <span class="built_in">len</span>(dump_list)</span><br><span class="line">    left = []</span><br><span class="line">    right = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        data = np.loadtxt(path+<span class="string">f&#x27;<span class="subst">&#123;dump_list[i][:-<span class="number">5</span>]&#125;</span>.txt&#x27;</span>,skiprows=<span class="number">1</span>)</span><br><span class="line">        left.append(data[<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        right.append(data[-<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    col = <span class="built_in">int</span>((<span class="built_in">max</span>(right) - <span class="built_in">min</span>(left)) / interval) </span><br><span class="line">    space = <span class="built_in">int</span>(<span class="number">0.05</span>*col)</span><br><span class="line">    col += <span class="number">2</span> * space</span><br><span class="line">    lx = <span class="built_in">min</span>(left)</span><br><span class="line">    ve = np.zeros((row, col))</span><br><span class="line">    px = np.zeros((row, col))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tian</span>(<span class="params">s, v, colindex, interval</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(colindex)-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> colindex[i+<span class="number">1</span>] - colindex[i] &lt; (<span class="number">5</span>+<span class="number">1</span>)/interval:</span><br><span class="line">                s[colindex[i]:colindex[i+<span class="number">1</span>]] = v[i]</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">        data = np.loadtxt(path+<span class="string">f&#x27;<span class="subst">&#123;dump_list[i][:-<span class="number">5</span>]&#125;</span>.txt&#x27;</span>,skiprows=<span class="number">1</span>)</span><br><span class="line">        colindex = ((data[:,<span class="number">0</span>] - lx) / interval + space).astype(<span class="built_in">int</span>)</span><br><span class="line">        v = data[:,<span class="number">2</span>]</span><br><span class="line">        p = data[:,<span class="number">3</span>]</span><br><span class="line">        ve[i,:] = tian(ve[i,:], v, colindex, interval)</span><br><span class="line">        px[i,:] = tian(px[i,:], p, colindex, interval)</span><br><span class="line">    np.savetxt(path+<span class="string">&#x27;ve.txt&#x27;</span>, ve, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    np.savetxt(path+<span class="string">&#x27;px.txt&#x27;</span>, px, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>并行化计算<br>为了提高计算效率，对于文件读取计算采用并行化处理，这样计算瓶颈主要体现在内存以及硬盘的读写，计算本身消耗的时间占比很小。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_dump_list</span>(<span class="params">path</span>):</span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(i)[<span class="number">1</span>] == <span class="string">&#x27;.dump&#x27;</span> <span class="keyword">and</span> i[:<span class="number">6</span>] == <span class="string">&#x27;impact&#x27;</span>:</span><br><span class="line">            file_list.append(i)</span><br><span class="line">    file_list = np.array(file_list)</span><br><span class="line">    step = np.array([i.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> file_list], dtype=<span class="built_in">int</span>)</span><br><span class="line">    file_list = file_list[np.argsort(step)]</span><br><span class="line">    <span class="keyword">return</span> file_list.tolist()</span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;F:/archive/GraNi/700m/&#x27;</span></span><br><span class="line">outpath = <span class="string">r&#x27;./GraNi/700m/&#x27;</span></span><br><span class="line">atype = <span class="string">&#x27;GraNi&#x27;</span></span><br><span class="line">os.makedirs(outpath,exist_ok=<span class="literal">True</span>)</span><br><span class="line">dump_list = get_dump_list(path)</span><br><span class="line">num_process = <span class="number">10</span> <span class="comment">#进程数目</span></span><br><span class="line">interval = <span class="built_in">int</span>(np.ceil(<span class="built_in">len</span>(dump_list)/num_process))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    processes = []</span><br><span class="line">    <span class="keyword">for</span> proc <span class="keyword">in</span> <span class="built_in">range</span>(num_process):</span><br><span class="line">        processes.append(Process(target=getbin,</span><br><span class="line">        args=(path, dump_list[proc*interval:<span class="built_in">min</span>(proc*interval+interval, <span class="built_in">len</span>(dump_list))], atype, outpath)</span><br><span class="line">        ))</span><br><span class="line">    <span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">        process.start()</span><br><span class="line">    <span class="keyword">for</span> process <span class="keyword">in</span> processes:  </span><br><span class="line">        process.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    getmatrix(outpath, dump_list, interval=<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;All done! Time costs <span class="subst">&#123;end-start&#125;</span> s.&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>一个纯Ni的冲击结果如下<br><img src="https://img.pterclub.com/images/2022/09/01/750m-ve.png" width="80%" alt="纯Ni速度波系图"></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过以上步骤可以获得初始数据，下一节会讲如何可视化波系图结果。</p>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我和香菇烧这些年甜蜜生活</title>
      <link href="/2022/08/29/wo-he-xiang-gu-shao-zhe-xie-nian-tian-mi-sheng-huo/"/>
      <url>/2022/08/29/wo-he-xiang-gu-shao-zhe-xie-nian-tian-mi-sheng-huo/</url>
      
        <content type="html"><![CDATA[<h2 id="先挖个坑"><a href="#先挖个坑" class="headerlink" title="先挖个坑"></a>先挖个坑</h2><ul><li>之后慢慢记录和宝贝的点点滴滴，嘿嘿！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 恋爱生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下并行版本Lammps安装</title>
      <link href="/2022/08/29/ubuntu-xia-bing-xing-ban-ben-lammps-an-zhuang/"/>
      <url>/2022/08/29/ubuntu-xia-bing-xing-ban-ben-lammps-an-zhuang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分子动力学 </tag>
            
            <tag> Lammps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib绘图模板</title>
      <link href="/2022/08/29/matplotlib-hui-tu-mo-ban/"/>
      <url>/2022/08/29/matplotlib-hui-tu-mo-ban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 科研绘图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>氦泡在氚化钛中的建模</title>
      <link href="/2022/08/24/hai-pao-zai-chuan-hua-tai-zhong-de-jian-mo/"/>
      <url>/2022/08/24/hai-pao-zai-chuan-hua-tai-zhong-de-jian-mo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>钛是一种良好的储氢元素,也可以用来储存氚(氢的同位素),在核物理领域应用十分广泛,但是氚会衰变生成氦元素,这些氦原子在氚化钛晶体中会逐渐聚集形成氦泡,并最终影响基体的力学性质，也就是材料的老化，为了研究其微观性质，我们建立了氚化钛中含氦泡的模型。</p><h2 id="建模过程"><a href="#建模过程" class="headerlink" title="建模过程"></a>建模过程</h2><ol><li>基础晶体建模，这里在每一个钛晶胞中添加一个氚原子。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bulid_structure</span>(<span class="params">Lattice_Constant, Structure_Type, x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该函数用于创建常见金属晶体结构！</span></span><br><span class="line"><span class="string">    :param Lattice_Constant: 晶格常数</span></span><br><span class="line"><span class="string">    :param Structure_Type: 金属晶体结构：FCC, BCC, HCP</span></span><br><span class="line"><span class="string">    :param x: x方向拓展个数</span></span><br><span class="line"><span class="string">    :param y: y方向拓展个数</span></span><br><span class="line"><span class="string">    :param z: z方向拓展个数</span></span><br><span class="line"><span class="string">    :return: 原子坐标 N-3 array</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Structure_Type == <span class="string">&#x27;FCC&#x27;</span>:</span><br><span class="line">        <span class="comment"># Cubic FCC basis</span></span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>],</span><br><span class="line">                            [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;HTi&#x27;</span>:</span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, np.sqrt(<span class="number">3</span>) * <span class="number">5</span> / <span class="number">6</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)],</span><br><span class="line">                            [<span class="number">0.0</span>, <span class="number">1</span> / <span class="number">3</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)],</span><br><span class="line">                            [<span class="number">0.25</span>, np.sqrt(<span class="number">3</span>) * <span class="number">5</span> / <span class="number">12</span>, <span class="number">1</span> / <span class="number">4</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line">        </span><br><span class="line">        atype = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">        positions = []</span><br><span class="line">        atypelist = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(z):</span><br><span class="line">                    base_position = np.array([i, j, k], dtype=<span class="built_in">float</span>)</span><br><span class="line">                    cart_position = np.dot(basis, base_position)</span><br><span class="line">                    atypelist += atype</span><br><span class="line">                    <span class="keyword">for</span> atom <span class="keyword">in</span> base_atoms:</span><br><span class="line">                        positions.append(cart_position + atom)</span><br><span class="line"></span><br><span class="line">        positions = np.array(positions)</span><br><span class="line">        atypelist = np.array(atypelist)</span><br><span class="line">        <span class="keyword">return</span> positions, atypelist</span><br><span class="line"></span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(z):</span><br><span class="line">                base_position = np.array([i, j, k])</span><br><span class="line">                cart_position = np.inner(basis.T, base_position)</span><br><span class="line">                <span class="keyword">for</span> atom <span class="keyword">in</span> base_atoms:</span><br><span class="line">                    positions.append(cart_position + atom)</span><br><span class="line">    <span class="keyword">return</span> np.array(positions)</span><br></pre></td></tr></table></figure></li><li>加入单个氦泡 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">onevoidHeTiH</span>(<span class="params">R=<span class="number">250</span>, Lbox=<span class="number">520</span>, L_HTi=<span class="number">2.9511</span>, L_He=<span class="number">2.98</span></span>):</span><br><span class="line">    x, y, z = np.<span class="built_in">round</span>(Lbox / np.array([<span class="number">1</span>, np.sqrt(<span class="number">3</span>), np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]) / L_HTi).astype(<span class="built_in">int</span>)</span><br><span class="line">    HTi, HTi_Type = bulid_structure(L_HTi, <span class="string">&#x27;HTi&#x27;</span>, x, y, z)</span><br><span class="line">    HTi -= np.mean(HTi, axis=<span class="number">0</span>)</span><br><span class="line">    index = np.where(HTi_Type==<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    N = <span class="built_in">len</span>(index)</span><br><span class="line">    np.random.seed(<span class="number">1000</span>)</span><br><span class="line">    index1 = np.random.choice(index, size = <span class="built_in">int</span>(<span class="number">0.95</span>*N), replace=<span class="literal">False</span>)</span><br><span class="line">    select = np.ones(<span class="built_in">len</span>(HTi), dtype=<span class="built_in">bool</span>)</span><br><span class="line">    select[index1] = <span class="literal">False</span></span><br><span class="line">    HTi = HTi[select]</span><br><span class="line">    HTi_Type = HTi_Type[select]</span><br><span class="line">    HeM = bulid_structure(L_He, <span class="string">&#x27;FCC&#x27;</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">    HeM -= np.mean(HeM, axis=<span class="number">0</span>)</span><br><span class="line">    HeM = HeM[np.<span class="built_in">sum</span>(np.square(HeM), axis=<span class="number">1</span>) &lt; R**<span class="number">2</span>]</span><br><span class="line">    void = np.<span class="built_in">sum</span>(np.square(HTi), axis=<span class="number">1</span>) &gt; R**<span class="number">2</span></span><br><span class="line">    HTi = HTi[void]</span><br><span class="line">    HTi_Type = HTi_Type[void]</span><br><span class="line">    positions = np.r_[HTi, HeM]</span><br><span class="line">    atypelist = HTi_Type.tolist() + [<span class="number">3</span>]*<span class="built_in">len</span>(HeM)</span><br><span class="line">    ratio = np.<span class="built_in">round</span>(<span class="built_in">len</span>(HeM) / <span class="built_in">len</span>(HTi_Type[HTi_Type==<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;H-Ti-<span class="subst">&#123;Lbox&#125;</span>-<span class="subst">&#123;L_He&#125;</span>-<span class="subst">&#123;R&#125;</span>-<span class="subst">&#123;ratio&#125;</span>.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First line is a comment line</span></span><br><span class="line">        op.write(<span class="string">&#x27;HTi structure, written by HerrWu\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; atoms\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(positions)))</span><br><span class="line">        op.write(<span class="string">&#x27;3 atom types\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; xlo xhi\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">0</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">0</span>].<span class="built_in">min</span>() + x * L_HTi * <span class="number">1.0</span>))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; ylo yhi\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">1</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">1</span>].<span class="built_in">min</span>() + y * L_HTi * np.sqrt(<span class="number">3</span>)))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; zlo zhi\n\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">2</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">2</span>].<span class="built_in">min</span>() + z * L_HTi * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Atoms section</span></span><br><span class="line">        op.write(<span class="string">&#x27;Atoms\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write each Position</span></span><br><span class="line">        <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(positions):</span><br><span class="line">            op.write(<span class="string">f&#x27;<span class="subst">&#123;idx+<span class="number">1</span>&#125;</span> <span class="subst">&#123;atypelist[idx]&#125;</span> <span class="subst">&#123;i[<span class="number">0</span>]&#125;</span> <span class="subst">&#123;i[<span class="number">1</span>]&#125;</span> <span class="subst">&#123;i[<span class="number">2</span>]&#125;</span>\n&#x27;</span>)</span><br><span class="line">onevoidHeTiH(R=<span class="number">250</span>, Lbox=<span class="number">550</span>, L_HTi=<span class="number">2.9511</span>, L_He=<span class="number">5.75</span>)</span><br></pre></td></tr></table></figure> 结果如下：<br> <img src="https://img.pterclub.com/images/2022/08/24/1void-ti.png" width="40%" alt="单个氦泡刨面图" border="0"></li><li>加入多个氦泡 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">numvoidHeTiH</span>(<span class="params">nvoid, R=<span class="number">10</span>, Lbox=<span class="number">100</span>, L_HTi=<span class="number">2.9511</span>, L_He=<span class="number">2.98</span></span>):</span><br><span class="line">    x, y, z = np.<span class="built_in">round</span>(Lbox / np.array([<span class="number">1</span>, np.sqrt(<span class="number">3</span>), np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]) / L_HTi).astype(<span class="built_in">int</span>)</span><br><span class="line">    HTi, HTi_Type = bulid_structure(L_HTi, <span class="string">&#x27;HTi&#x27;</span>, x, y, z)</span><br><span class="line">    HTi -= np.mean(HTi, axis=<span class="number">0</span>)</span><br><span class="line">    index = np.where(HTi_Type==<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    N = <span class="built_in">len</span>(index)</span><br><span class="line">    index1 = np.random.choice(index, size = <span class="built_in">int</span>(<span class="number">0.95</span>*N), replace=<span class="literal">False</span>)</span><br><span class="line">    select = np.ones(<span class="built_in">len</span>(HTi), dtype=<span class="built_in">bool</span>)</span><br><span class="line">    select[index1] = <span class="literal">False</span></span><br><span class="line">    HTi = HTi[select]</span><br><span class="line">    HTi_Type = HTi_Type[select]</span><br><span class="line">    </span><br><span class="line">    HeM = bulid_structure(L_He, <span class="string">&#x27;FCC&#x27;</span>, <span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>)</span><br><span class="line">    HeM -= np.mean(HeM, axis=<span class="number">0</span>)</span><br><span class="line">    void = np.ones(<span class="built_in">len</span>(HTi), dtype=<span class="built_in">bool</span>)</span><br><span class="line">    HeMpos = []</span><br><span class="line">    <span class="built_in">print</span>(np.random.randint(-<span class="number">30</span>, <span class="number">30</span>, size=(nvoid, <span class="number">3</span>)))</span><br><span class="line">    <span class="keyword">for</span> coma <span class="keyword">in</span> np.random.randint(-<span class="number">30</span>, <span class="number">30</span>, size=(nvoid, <span class="number">3</span>)):</span><br><span class="line">        void = np.logical_and(void, (np.<span class="built_in">sum</span>(np.square(HTi - coma), axis=<span class="number">1</span>) &gt; R**<span class="number">2</span>))</span><br><span class="line">        hp = HeM.copy()</span><br><span class="line">        hp = hp[np.<span class="built_in">sum</span>(np.square(hp), axis=<span class="number">1</span>) &lt; R**<span class="number">2</span>]</span><br><span class="line">        hp += coma</span><br><span class="line">        HeMpos.append(hp)</span><br><span class="line">    HeMpos = np.vstack(HeMpos)</span><br><span class="line"></span><br><span class="line">    HTi = HTi[void]</span><br><span class="line">    HTi_Type = HTi_Type[void]</span><br><span class="line"></span><br><span class="line">    positions = np.r_[HTi, HeMpos]</span><br><span class="line">    atypelist = HTi_Type.tolist() + [<span class="number">3</span>]*<span class="built_in">len</span>(HeMpos)</span><br><span class="line">    ratio = np.<span class="built_in">round</span>(<span class="built_in">len</span>(HeMpos) / <span class="built_in">len</span>(HTi_Type[HTi_Type==<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;H-Ti-<span class="subst">&#123;Lbox&#125;</span>-<span class="subst">&#123;L_He&#125;</span>-<span class="subst">&#123;R&#125;</span>-<span class="subst">&#123;ratio&#125;</span>.data&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First line is a comment line</span></span><br><span class="line">        op.write(<span class="string">&#x27;HTi structure, written by HerrWu\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; atoms\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(positions)))</span><br><span class="line">        op.write(<span class="string">&#x27;3 atom types\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; xlo xhi\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">0</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">0</span>].<span class="built_in">min</span>() + x * L_HTi * <span class="number">1.0</span>))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; ylo yhi\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">1</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">1</span>].<span class="built_in">min</span>() + y * L_HTi * np.sqrt(<span class="number">3</span>)))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; zlo zhi\n\n&#x27;</span>.<span class="built_in">format</span>(HTi[:,<span class="number">2</span>].<span class="built_in">min</span>(), HTi[:,<span class="number">2</span>].<span class="built_in">min</span>() + z * L_HTi * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Atoms section</span></span><br><span class="line">        op.write(<span class="string">&#x27;Atoms\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write each Position</span></span><br><span class="line">        <span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(positions):</span><br><span class="line">            op.write(<span class="string">f&#x27;<span class="subst">&#123;idx+<span class="number">1</span>&#125;</span> <span class="subst">&#123;atypelist[idx]&#125;</span> <span class="subst">&#123;i[<span class="number">0</span>]&#125;</span> <span class="subst">&#123;i[<span class="number">1</span>]&#125;</span> <span class="subst">&#123;i[<span class="number">2</span>]&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">numvoidHeTiH(nvoid=<span class="number">6</span>)</span><br></pre></td></tr></table></figure> 结果如下：<br> <img src="https://img.pterclub.com/images/2022/08/24/6void-ti.png" width="40%" alt="多个氦泡刨面图" border="0"><br> <img src="https://img.pterclub.com/images/2022/08/24/6void.png" width="40%" alt="删掉钛原子示意图" border="0"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIREBO势函数截断半径测试</title>
      <link href="/2022/08/20/airebo-shi-han-shu-jie-duan-ban-jing-ce-shi/"/>
      <url>/2022/08/20/airebo-shi-han-shu-jie-duan-ban-jing-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><a href="https://aip.scitation.org/doi/10.1063/1.4905549">AIREBO</a>势函数是常用的模拟石墨烯，碳纳米管等结构的势函数，其近程相互作用默认在0.17nm-0.2nm之间会有一个非物理的应变硬化，已经有一些研究手动修改截断半径到0.2nm，比如<a href="https://doi.org/10.1063/1.3488620">这篇</a>.这里我们简单记录一下测试不同的截断半径对石墨烯单轴拉伸曲线的影响。</p><h2 id="建立单层石墨烯"><a href="#建立单层石墨烯" class="headerlink" title="建立单层石墨烯"></a>建立单层石墨烯</h2><p>这里为了计算快速就建立一个5nmx5nm的小石墨烯，bulid_structure函数见<a href="https://blog.mushroomfire.com/2022/08/20/chang-jian-jing-ti-jie-gou-jian-mo/">文章</a>.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">pos, La, Lb, Lc, filename=<span class="string">&#x27;grap.data&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Writing <span class="subst">&#123;filename&#125;</span>...&#x27;</span>)</span><br><span class="line">    xmin, ymin, zmin = np.<span class="built_in">min</span>(pos, axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op:</span><br><span class="line">        <span class="comment"># First line is a comment line</span></span><br><span class="line">        op.write(<span class="string">&#x27;Graphene structure, written by HerrWu\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; atoms\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(pos)))</span><br><span class="line">        op.write(<span class="string">&#x27;1 atom types\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Specify box Dimensions</span></span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; xlo xhi\n&#x27;</span>.<span class="built_in">format</span>(xmin, xmin+La))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; ylo yhi\n&#x27;</span>.<span class="built_in">format</span>(ymin, ymin+Lb))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; zlo zhi\n\n&#x27;</span>.<span class="built_in">format</span>(zmin-Lc, zmin+Lc))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Atoms section</span></span><br><span class="line">        op.write(<span class="string">&#x27;Atoms\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write each Position</span></span><br><span class="line">        aidx = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> pos:</span><br><span class="line">            op.write(<span class="string">&#x27;&#123;&#125; 1 &#123;&#125; &#123;&#125; &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(aidx, *i))</span><br><span class="line">            aidx += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">x,y,z = <span class="number">12</span>, <span class="number">21</span>, <span class="number">1</span></span><br><span class="line">Lattice_Constant = <span class="number">1.42</span></span><br><span class="line">Structure_Type = <span class="string">&#x27;GRA&#x27;</span></span><br><span class="line">pos = bulid_structure(Lattice_Constant, Structure_Type, x, y, z)</span><br><span class="line">La, Lb, Lc = x*Lattice_Constant*<span class="number">3</span>, y*Lattice_Constant*<span class="number">3</span>**<span class="number">0.5</span>, <span class="number">10</span></span><br><span class="line">write_data(pos, La, Lb, Lc, filename=<span class="string">&#x27;grap.data&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h2 id="石墨烯拉伸脚本"><a href="#石墨烯拉伸脚本" class="headerlink" title="石墨烯拉伸脚本"></a>石墨烯拉伸脚本</h2><p>这个脚本是直接从<a href="https://github.com/nuwan-d/graphene_tensile_test">网上</a>抄的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#uniaxial tensile test of graphene</span></span><br><span class="line"><span class="comment">##---------------INITIALIZATION-------------------------------</span></span><br><span class="line">units          metal</span><br><span class="line">dimension     3 </span><br><span class="line">boundary       p p f</span><br><span class="line">atom_style atomic</span><br><span class="line">newton on</span><br><span class="line"><span class="comment">##---------------ATOM DEFINITION------------------------------</span></span><br><span class="line">read_data grap.data</span><br><span class="line"><span class="comment">##---------------FORCE FIELDS---------------------------------</span></span><br><span class="line">pair_style airebo 3.0</span><br><span class="line">pair_coeff     * * CH.airebo C</span><br><span class="line"><span class="comment">##---------------SETTINGS-------------------------------------</span></span><br><span class="line">timestep 0.0005</span><br><span class="line">variable   ts equal 0.0005</span><br><span class="line"><span class="comment">##---------------COMPUTES-------------------------------------</span></span><br><span class="line">compute 1 all stress/atom NULL</span><br><span class="line">compute    2 all reduce <span class="built_in">sum</span> c_1[1] c_1[2]</span><br><span class="line"></span><br><span class="line">variable   Lx equal lx</span><br><span class="line">variable   Ly equal ly</span><br><span class="line">variable   Lz equal lz</span><br><span class="line">variable   Vol equal vol</span><br><span class="line">variable   thickn equal 3.4</span><br><span class="line">fix1 all npt temp 300 300 0.05 x 0 0 0.5 y 0 0 0.5</span><br><span class="line">thermo 2000</span><br><span class="line"><span class="comment">##---------------RELAXATION--------------------------------------</span></span><br><span class="line">run            50000</span><br><span class="line"><span class="comment">##---------------DEFORMATION-------------------------------------</span></span><br><span class="line">unfix              1</span><br><span class="line">reset_timestep     0</span><br><span class="line">fix1 all npt temp 300 300 0.05 x 0 0 0.5</span><br><span class="line">fix        2 all ave/time 1 100 100 c_2[1] c_2[2]</span><br><span class="line">fix        3 all ave/time 1 100 100 v_Lx v_Ly v_Lz v_Vol</span><br><span class="line">variable   srate equal 1.0e9</span><br><span class="line">variable   srate1 equal <span class="string">&quot;v_srate / 1.0e12&quot;</span></span><br><span class="line">fix4 all deform 1 y erate <span class="variable">$&#123;srate1&#125;</span> units box remap x</span><br><span class="line">run            100</span><br><span class="line"><span class="comment">##---------------THERMO-OUTPUTS-----------------------------------</span></span><br><span class="line">variable   CorVol equal f_3[4]*v_thickn/(f_3[3])</span><br><span class="line">variable   ConvoFac equal 1/1.0e4</span><br><span class="line">variable   sigmaxx equal f_2[1]*v_ConvoFac/v_CorVol</span><br><span class="line">variable   sigmayy equal f_2[2]*v_ConvoFac/v_CorVol</span><br><span class="line">variable   StrainPerTs equal v_srate1*v_ts</span><br><span class="line">variable   strain equal v_StrainPerTs*step</span><br><span class="line">thermo 100</span><br><span class="line">thermo_style custom step temp v_strain v_sigmaxx v_sigmayy pe ke lx ly vol </span><br><span class="line"><span class="comment">##---------------DEFORMATION-------------------------------------</span></span><br><span class="line">dump           1 all atom 5000 tensile_test.lammpstrj</span><br><span class="line">run            500000</span><br></pre></td></tr></table></figure><br>我们需要修改CH.airebo文件中的rcmin_CC和rcmax_CC，默认是1.7和2.0.</p><h2 id="结果可视化"><a href="#结果可视化" class="headerlink" title="结果可视化"></a>结果可视化</h2>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
            <tag> Lammps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见晶体结构建模</title>
      <link href="/2022/08/20/chang-jian-jing-ti-jie-gou-jian-mo/"/>
      <url>/2022/08/20/chang-jian-jing-ti-jie-gou-jian-mo/</url>
      
        <content type="html"><![CDATA[<h2 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h2><p>基本思想就是建立原胞，然后按照基矢量复制基原子，目前支持BCC,FCC,HCP,graphene等结构，但是目前还不能进行晶相的旋转变换，有时间的话之后再写。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bulid_structure</span>(<span class="params">Lattice_Constant, Structure_Type, x, y, z</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Structure_Type == <span class="string">&#x27;FCC&#x27;</span>:</span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                               [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>],</span><br><span class="line">                               [<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>],</span><br><span class="line">                               [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;BCC&#x27;</span>:</span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                          [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                          [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                               [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;HCP&#x27;</span>:</span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                          [<span class="number">0.0</span>, np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                          [<span class="number">0.0</span>, <span class="number">0.0</span>, np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                               [<span class="number">0.5</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                               [<span class="number">0.5</span>, np.sqrt(<span class="number">3</span>) * <span class="number">5</span> / <span class="number">6</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)],</span><br><span class="line">                               [<span class="number">0.0</span>, <span class="number">1</span> / <span class="number">3</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;GRA&#x27;</span>:</span><br><span class="line">        basis = np.array([</span><br><span class="line">            [<span class="number">3.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">0.0</span>, np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">3.4</span>]</span><br><span class="line">        ]) * Lattice_Constant</span><br><span class="line">        base_atoms = np.array(</span><br><span class="line">            [[<span class="number">1</span>/<span class="number">6</span> , <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">             [<span class="number">0.5</span> , <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">0.0</span>, <span class="number">0.5</span> , <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">2</span>/<span class="number">3</span> , <span class="number">0.5</span> , <span class="number">0.0</span>]]</span><br><span class="line">        ) * np.array([Lattice_Constant * <span class="number">3</span>, Lattice_Constant * np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>])</span><br><span class="line"></span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(z):</span><br><span class="line">                base_position = np.array([i, j, k], dtype=np.float64)</span><br><span class="line">                cart_position = np.dot(basis, base_position)</span><br><span class="line">                <span class="keyword">for</span> atom_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base_atoms)):</span><br><span class="line">                    positions.append(cart_position + base_atoms[atom_index])</span><br><span class="line">    <span class="keyword">return</span> np.array(positions)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石墨烯网络与铝基体复合建模教程</title>
      <link href="/2022/08/19/shi-mo-xi-wang-luo-yu-lu-ji-ti-fu-he-jian-mo-jiao-cheng/"/>
      <url>/2022/08/19/shi-mo-xi-wang-luo-yu-lu-ji-ti-fu-he-jian-mo-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><a href="https://blog.mushroomfire.com/2022/08/15/qiu-xing-shi-mo-xi-jian-mo-jiao-cheng/">上一篇文章</a>中我们建立了一个球状的石墨烯，这里我们对其进行一定的空间排布，然后与金属铝混合在一起，为之后计算其力学性质做准备。</p><h2 id="BCC空间排布"><a href="#BCC空间排布" class="headerlink" title="BCC空间排布"></a>BCC空间排布</h2><p>BCC是一种常见的金属晶体结构，比如Fe，当然，这里的排布方式并不是固定了，也可以采用FCC或者简单的堆垛，采用BCC我目前也没有必须的科学依据。我写的python代码如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getBCCgra</span>(<span class="params">iname</span>):</span><br><span class="line">    data = pd.read_csv(<span class="string">&#x27;G27-25.data&#x27;</span>, skiprows=<span class="number">9</span>, </span><br><span class="line">                header=<span class="literal">None</span>,index_col=<span class="literal">False</span>,sep=<span class="string">&#x27; &#x27;</span>,</span><br><span class="line">                names=[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    pos = data[[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]].values</span><br><span class="line">    pos -= np.mean(pos, axis=<span class="number">0</span>)</span><br><span class="line">    R = np.mean(np.<span class="built_in">max</span>(pos, axis=<span class="number">0</span>) - np.<span class="built_in">min</span>(pos, axis=<span class="number">0</span>))/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    atype = <span class="string">&#x27;BCC&#x27;</span></span><br><span class="line">    Lattice_Constant = (<span class="number">2</span>*R+<span class="number">1.42</span>)*<span class="number">2</span>/np.sqrt(<span class="number">3</span>)</span><br><span class="line">    basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                    [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line">    base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                           [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">    x, y, z = <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(z):</span><br><span class="line">                base_position = np.array([i, j, k], dtype=<span class="built_in">float</span>)</span><br><span class="line">                cart_position = np.dot(basis, base_position)</span><br><span class="line">                <span class="keyword">for</span> atom_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(base_atoms)):</span><br><span class="line">                    npos = pos.copy()</span><br><span class="line">                    npos += cart_position + base_atoms[atom_index]</span><br><span class="line">                    <span class="keyword">for</span> m <span class="keyword">in</span> npos:</span><br><span class="line">                        positions.append(m)</span><br><span class="line">    positions = np.array(positions)</span><br><span class="line">    xhi,yhi,zhi = Lattice_Constant*(np.array([x,y,z])-<span class="number">1</span>)</span><br><span class="line">    positions = positions[(positions[:,<span class="number">0</span>]&lt;xhi) </span><br><span class="line">                          &amp; (positions[:,<span class="number">1</span>]&lt;yhi) </span><br><span class="line">                          &amp; (positions[:,<span class="number">2</span>]&lt;zhi)]</span><br><span class="line">    positions = positions[(positions[:,<span class="number">0</span>]&gt;<span class="number">0</span>) </span><br><span class="line">                          &amp; (positions[:,<span class="number">1</span>]&gt;<span class="number">0</span>) </span><br><span class="line">                          &amp; (positions[:,<span class="number">2</span>]&gt;<span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    df = pd.DataFrame(positions, columns=[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">    df[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    df[<span class="string">&#x27;idx&#x27;</span>] = np.arange(<span class="built_in">len</span>(df))+<span class="number">1</span></span><br><span class="line">    df = df[[<span class="string">&#x27;idx&#x27;</span>,<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]]</span><br><span class="line">    oname = iname.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">f&#x27;-<span class="subst">&#123;x-<span class="number">1</span>&#125;</span>-<span class="subst">&#123;y-<span class="number">1</span>&#125;</span>-<span class="subst">&#123;z-<span class="number">1</span>&#125;</span>.data&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(oname, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op: <span class="comment"># 写入data文件</span></span><br><span class="line">        op.write(<span class="string">f&#x27;# <span class="subst">&#123;oname&#125;</span> written by HerrWu.\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">len</span>(df)&#125;</span> atoms\n1 atom types\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;0 <span class="subst">&#123;xhi&#125;</span> xlo xhi\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;0 <span class="subst">&#123;yhi&#125;</span> ylo yhi\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;0 <span class="subst">&#123;zhi&#125;</span> zlo zhi\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;Atoms # atomic\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    df.to_csv(oname, sep = <span class="string">&#x27; &#x27;</span>,index=<span class="literal">False</span>, header=<span class="literal">None</span>, mode=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    iname = <span class="string">&#x27;G27-25.data&#x27;</span></span><br><span class="line">    getBCCgra(iname)</span><br></pre></td></tr></table></figure><br>运行结果如下：<br><img src="https://img.pterclub.com/images/2022/08/20/bcc-gra.png" alt="BCC石墨烯网络示意图" border="0"></p><h2 id="BCC石墨烯弛豫"><a href="#BCC石墨烯弛豫" class="headerlink" title="BCC石墨烯弛豫"></a>BCC石墨烯弛豫</h2><p>LAMMPS弛豫脚本如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">dimension 3</span><br><span class="line">units metal</span><br><span class="line">boundary p p p</span><br><span class="line">atom_style atomic</span><br><span class="line"></span><br><span class="line">read_data ./G27-25-3-1-1.data </span><br><span class="line">neighbor 1.0 bin</span><br><span class="line">neigh_modify every 5 delay 0 check <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">mass 1 12.010700</span><br><span class="line">pair_style airebo/morse 3.0 1 </span><br><span class="line">pair_coeff * * ./CH.airebo-m C</span><br><span class="line"></span><br><span class="line">timestep 0.001</span><br><span class="line">shell <span class="built_in">mkdir</span> minimize</span><br><span class="line">dump mini all custom 100 minimize/mini.*.dump <span class="built_in">id</span> <span class="built_in">type</span> x y z vx vy vz</span><br><span class="line">min_style cg</span><br><span class="line">minimize 1.0e-8 1.0e-8 10000 10000</span><br><span class="line">undump mini </span><br><span class="line">reset_timestep 0 </span><br><span class="line"></span><br><span class="line">variable Press equal press</span><br><span class="line">variable Temp equal temp</span><br><span class="line">variable Step equal step</span><br><span class="line">variable PE equal pe</span><br><span class="line"></span><br><span class="line">thermo 100</span><br><span class="line">thermo_style custom step temp press pe ke</span><br><span class="line"></span><br><span class="line">velocity all create 300 429816734892 dist gaussian mom <span class="built_in">yes</span> rot <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">fix 1 all npt temp 300 300 0.1 x 0 0 1 y 0 0 1 z 0 0 1</span><br><span class="line"></span><br><span class="line">fix 2 all <span class="built_in">print</span> 100 <span class="string">&quot;<span class="variable">$&#123;Step&#125;</span> <span class="variable">$&#123;Temp&#125;</span> <span class="variable">$&#123;Press&#125;</span> <span class="variable">$&#123;PE&#125;</span>&quot;</span> file relax.txt screen no title <span class="string">&quot;Step Temp Press PE&quot;</span></span><br><span class="line">shell <span class="built_in">mkdir</span> relax</span><br><span class="line">dump 1 all custom 100 relax/relax.*.dump <span class="built_in">id</span> <span class="built_in">type</span> x y z vx vy vz</span><br><span class="line"></span><br><span class="line">run 50000</span><br></pre></td></tr></table></figure><br>弛豫后构型球状石墨烯逐渐转变为二十面体，面与面的接触面积增大，整体体积收缩，结果如下：<br><img src="https://img.pterclub.com/images/2022/08/20/bcc-gra-relax.png" alt="弛豫后BCC石墨烯网络示意图" border="0"></p><h2 id="石墨烯网络与铝基体复合"><a href="#石墨烯网络与铝基体复合" class="headerlink" title="石墨烯网络与铝基体复合"></a>石墨烯网络与铝基体复合</h2><ul><li>首先在盒子内添加FCC铝原子，晶格常数这里取4.05，脚本如下：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bulid_structure</span>(<span class="params">Lattice_Constant, Structure_Type, x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    该函数用于创建常见金属晶体结构！</span></span><br><span class="line"><span class="string">    :param Lattice_Constant: 晶格常数</span></span><br><span class="line"><span class="string">    :param Structure_Type: 金属晶体结构：FCC, BCC, HCP</span></span><br><span class="line"><span class="string">    :param x: x方向拓展个数</span></span><br><span class="line"><span class="string">    :param y: y方向拓展个数</span></span><br><span class="line"><span class="string">    :param z: z方向拓展个数</span></span><br><span class="line"><span class="string">    :return: 原子坐标 N-3 array</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> Structure_Type == <span class="string">&#x27;FCC&#x27;</span>:</span><br><span class="line">        <span class="comment"># Cubic FCC basis</span></span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.0</span>, <span class="number">0.5</span>],</span><br><span class="line">                            [<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;BCC&#x27;</span>:</span><br><span class="line">        <span class="comment"># Cubic BCC basis</span></span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]]) * Lattice_Constant</span><br><span class="line">    <span class="keyword">elif</span> Structure_Type == <span class="string">&#x27;HCP&#x27;</span>:</span><br><span class="line">        <span class="comment"># Cubic HCP basis</span></span><br><span class="line">        basis = np.array([[<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                        [<span class="number">0.0</span>, <span class="number">0.0</span>, np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line"></span><br><span class="line">        base_atoms = np.array([[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">0.5</span>, np.sqrt(<span class="number">3</span>) * <span class="number">5</span> / <span class="number">6</span>, <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)],</span><br><span class="line">                            [<span class="number">0.0</span>, <span class="number">1</span> / <span class="number">3</span> * np.sqrt(<span class="number">3</span>), <span class="number">0.5</span> * np.sqrt(<span class="number">8</span> / <span class="number">3</span>)]]) * Lattice_Constant</span><br><span class="line">    <span class="comment"># Generate atom positions</span></span><br><span class="line">    positions = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(z):</span><br><span class="line">                base_position = np.array([i, j, k])</span><br><span class="line">                cart_position = np.inner(basis.T, base_position)</span><br><span class="line">                <span class="keyword">for</span> atom <span class="keyword">in</span> base_atoms:</span><br><span class="line">                    positions.append(cart_position + atom)</span><br><span class="line">    <span class="keyword">return</span> np.array(positions)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_Al</span>(<span class="params">gra, LAl=<span class="number">4.05</span></span>):</span><br><span class="line">    xmin, ymin, zmin = np.<span class="built_in">min</span>(gra, axis=<span class="number">0</span>)</span><br><span class="line">    xmax, ymax, zmax = np.<span class="built_in">max</span>(gra, axis=<span class="number">0</span>)</span><br><span class="line">    a, b ,c = np.<span class="built_in">round</span>((np.<span class="built_in">max</span>(gra, axis = <span class="number">0</span>) - np.<span class="built_in">min</span>(gra, axis=<span class="number">0</span>))/LAl).astype(<span class="built_in">int</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Building Al...&#x27;</span>)</span><br><span class="line">    Al = np.array(bulid_structure(LAl, <span class="string">&#x27;FCC&#x27;</span>, a, b, c))</span><br><span class="line">    Al = Al - np.<span class="built_in">min</span>(Al, axis=<span class="number">0</span>) + np.<span class="built_in">min</span>(gra,axis=<span class="number">0</span>)</span><br><span class="line">    La, Lb, Lc = a*LAl, b*LAl, c*LAl</span><br><span class="line">    atype = np.r_[np.ones(<span class="built_in">len</span>(Al)), np.ones(<span class="built_in">len</span>(gra))*<span class="number">2</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">return</span> gra, Al, atype, La, Lb, Lc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_data</span>(<span class="params">points_mask, atype_mask, La, Lb, Lc, filename=<span class="string">&#x27;gra-Al.data&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Writing <span class="subst">&#123;filename&#125;</span>...&#x27;</span>)</span><br><span class="line">    xmin, ymin, zmin = np.<span class="built_in">min</span>(points_mask, axis=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op:</span><br><span class="line">        <span class="comment"># First line is a comment line</span></span><br><span class="line">        op.write(<span class="string">&#x27;Gra-Al structure, written by HerrWu\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; atoms\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(points_mask)))</span><br><span class="line">        op.write(<span class="string">&#x27;2 atom types\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Specify box Dimensions</span></span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; xlo xhi\n&#x27;</span>.<span class="built_in">format</span>(xmin, xmin+La))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; ylo yhi\n&#x27;</span>.<span class="built_in">format</span>(ymin, ymin+Lb))</span><br><span class="line">        op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; zlo zhi\n\n&#x27;</span>.<span class="built_in">format</span>(zmin, zmin+Lc))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Atoms section</span></span><br><span class="line">        op.write(<span class="string">&#x27;Atoms\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Write each Position</span></span><br><span class="line">        aidx = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> itype, pos <span class="keyword">in</span> <span class="built_in">zip</span>(atype_mask, points_mask):</span><br><span class="line">            op.write(<span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(aidx, itype, *pos))</span><br><span class="line">            aidx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;relax.50000.dump&#x27;</span>, skiprows=<span class="number">9</span>, </span><br><span class="line">            header=<span class="literal">None</span>,index_col=<span class="literal">False</span>,sep=<span class="string">&#x27; &#x27;</span>,</span><br><span class="line">            names=[<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;vx&#x27;</span>, <span class="string">&#x27;vy&#x27;</span>, <span class="string">&#x27;vz&#x27;</span>])</span><br><span class="line">gra = data[[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]].values</span><br><span class="line">gra, Al, atype, La, Lb, Lc = build_Al(gra, LAl=<span class="number">4.05</span>)</span><br><span class="line">points = np.r_[Al, gra]</span><br><span class="line">write_data(points, atype, La, Lb, Lc)</span><br></pre></td></tr></table></figure></li><li>但是此时的铝和石墨烯之间原子存在重叠的现象，需要将距离过近的原子删掉，使用LAMMPS脚本如下：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dimension 3</span><br><span class="line">units metal</span><br><span class="line">boundary p p p</span><br><span class="line">atom_style atomic</span><br><span class="line"></span><br><span class="line">read_data gra-al.data </span><br><span class="line"></span><br><span class="line">mass 1 26.981538</span><br><span class="line">mass 2 12.010700</span><br><span class="line"></span><br><span class="line">group al <span class="built_in">type</span> 1</span><br><span class="line">group gra <span class="built_in">type</span> 2</span><br><span class="line"></span><br><span class="line">neighbor 2.0 bin</span><br><span class="line">neigh_modify every 1 delay 0 check <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">pair_style hybrid airebo/morse 3.0 1 eam/alloy lj/cut 7.83125 <span class="comment">#（2.5*sigma）</span></span><br><span class="line">pair_coeff * * airebo/morse ../CH.airebo-m NULL C</span><br><span class="line">pair_coeff * * eam/alloy ./Al_DFT.eam.alloy Al NULL</span><br><span class="line">pair_coeff 1 2 lj/cut 0.003457 3.1325</span><br><span class="line"></span><br><span class="line">timestep 0.001</span><br><span class="line"></span><br><span class="line">delete_atoms overlap 3.1325 al gra <span class="comment"># 这句话很重要，再次体现LAMMPS 代码的高效性能 </span></span><br><span class="line"></span><br><span class="line">write_data gra-al-delete.data </span><br></pre></td></tr></table></figure>删除后模型如下：<br><img src="https://img.pterclub.com/images/2022/08/20/bcc-gra-Al.png" alt="BCC石墨烯网络/铝基体示意图" border="0"></li><li>最后进行弛豫，LAMMPS脚本如下：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">dimension 3</span><br><span class="line">units metal</span><br><span class="line">boundary p p p</span><br><span class="line">atom_style atomic</span><br><span class="line"></span><br><span class="line">read_data gra-al-delete.data </span><br><span class="line"></span><br><span class="line">mass 1 26.981538</span><br><span class="line">mass 2 12.010700</span><br><span class="line"></span><br><span class="line">group al <span class="built_in">type</span> 1</span><br><span class="line">group gra <span class="built_in">type</span> 2</span><br><span class="line"></span><br><span class="line">neighbor 2.0 bin</span><br><span class="line">neigh_modify every 1 delay 0 check <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">pair_style hybrid airebo/morse 3.0 1 eam/alloy lj/cut 7.83125 <span class="comment">#（2.5*sigma）</span></span><br><span class="line">pair_coeff * * airebo/morse ../CH.airebo-m NULL C</span><br><span class="line">pair_coeff * * eam/alloy ./Al_DFT.eam.alloy Al NULL</span><br><span class="line">pair_coeff 1 2 lj/cut 0.003457 3.1325</span><br><span class="line"></span><br><span class="line">timestep 0.001</span><br><span class="line"></span><br><span class="line">shell <span class="built_in">mkdir</span> minimize</span><br><span class="line">dump mini all custom 100 minimize/mini.*.dump <span class="built_in">id</span> <span class="built_in">type</span> x y z vx vy vz</span><br><span class="line">min_style cg</span><br><span class="line">minimize 1.0e-8 1.0e-8 10000 10000 </span><br><span class="line">undump mini </span><br><span class="line">reset_timestep 0 </span><br><span class="line"></span><br><span class="line">variable Press equal press</span><br><span class="line">variable Temp equal temp</span><br><span class="line">variable Step equal step</span><br><span class="line">variable PE equal pe</span><br><span class="line"></span><br><span class="line">thermo 100</span><br><span class="line">thermo_style custom step temp press pe ke</span><br><span class="line"></span><br><span class="line">velocity all create 300 429816734892 dist gaussian mom <span class="built_in">yes</span> rot <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">fix 1 all npt temp 300 300 0.1 x 0 0 1 y 0 0 1 z 0 0 1</span><br><span class="line"></span><br><span class="line">fix 2 all <span class="built_in">print</span> 100 <span class="string">&quot;<span class="variable">$&#123;Step&#125;</span> <span class="variable">$&#123;Temp&#125;</span> <span class="variable">$&#123;Press&#125;</span> <span class="variable">$&#123;PE&#125;</span>&quot;</span> file relax.txt screen no title <span class="string">&quot;Step Temp Press PE&quot;</span></span><br><span class="line">shell <span class="built_in">mkdir</span> relax</span><br><span class="line">dump 1 all custom 100 relax/relax.*.dump <span class="built_in">id</span> <span class="built_in">type</span> x y z vx vy vz</span><br><span class="line"></span><br><span class="line">run 50000</span><br></pre></td></tr></table></figure>  弛豫后构型如下：<br>  <img src="https://img.pterclub.com/images/2022/08/20/bcc-gra-Al-relax.png" alt="弛豫后BCC石墨烯网络/铝基体示意图" border="0"><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>通过以上步骤一个平衡好的构型就可以拿来做计算了，在后续的内容里面我会讲解冲击的设置以及分析结果，这类的博客也是用来记录这篇文章的研究过程，方便自己梳理，好的，那这次就到这里了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
            <tag> Lammps </tag>
            
            <tag> 石墨烯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepMD学习记录</title>
      <link href="/2022/08/15/deepmd-xue-xi-ji-lu/"/>
      <url>/2022/08/15/deepmd-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepMD </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析python的GPU计算</title>
      <link href="/2022/08/15/qian-xi-python-de-gpu-ji-suan/"/>
      <url>/2022/08/15/qian-xi-python-de-gpu-ji-suan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速python运算之numba篇</title>
      <link href="/2022/08/15/jia-su-python-yun-suan-zhi-numba-pian/"/>
      <url>/2022/08/15/jia-su-python-yun-suan-zhi-numba-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fortran学习心得</title>
      <link href="/2022/08/15/fortran-xue-xi-xin-de/"/>
      <url>/2022/08/15/fortran-xue-xi-xin-de/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fortran </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高熵合金建模教程</title>
      <link href="/2022/08/15/gao-shang-he-jin-jian-mo-jiao-cheng/"/>
      <url>/2022/08/15/gao-shang-he-jin-jian-mo-jiao-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>球形石墨烯建模教程</title>
      <link href="/2022/08/15/qiu-xing-shi-mo-xi-jian-mo-jiao-cheng/"/>
      <url>/2022/08/15/qiu-xing-shi-mo-xi-jian-mo-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>石墨烯因为优异的物理和力学性质，是一种很重要的二维材料。其中一个用途就是通过和金属复合来提高基体的力学性能。但是传统的层状复合，存在一些难以避免的问题，比如受载荷的强各向异性，石墨烯本身的团聚等，都会显著降低其实际应用价值。于是，构建三维化的石墨烯网格成为一种潜在的解决手段。包括石墨烯/碳纳米管的结合，蜂窝状石墨烯，网状石墨烯，以及今天我主要关心的球状石墨烯。</p><p>球状石墨烯，最简单的例子是足球烯，也就是常说的C60,这一类球形的，完全由近似正六边形和正五边形组成的结构，还有一个名字叫做<a href="https://en.wikipedia.org/wiki/Goldberg_polyhedron">Goldberg polyhedron</a> (GP)。这类结构有两个重要参数m,n,代表从任意一个正五边形出发，直走m步,左转60°n步，就能刚好到达下一个正五边形，简称G(m,n)。比如下图就是G(1,4).<br><img src="https://img.pterclub.com/images/2022/08/17/G14.png" width="40%" alt="G(1,4) 图形"><br>这里，构建球形石墨烯，我们就建立这样的初始构型来表征其初始原子分布。</p><h2 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h2><p>一般来说，建立模型我都是用python来做的，尤其是晶体结构比较明确的那种，比如FCC晶体，单层石墨烯这种，不过今天这个由于比较复杂，所以我认为应该是有现成的轮子可以用的。一通谷歌以后，还真找到了几个：</p><ul><li><a href="http://nanocap.sourceforge.net/">NanoCap</a></li><li><a href="http://antiprism.com/">Antiprism</a></li></ul><p>这两个软件都可以用来生成GP,NanoCap自带图形界面，windows/ubuntu都可以直接使用，但是只有一个指定参数，就是C原子数目，它并不是按照数学上的方式来直接建立GP，似乎是加的有优化，好处是生成的球状石墨烯结构上很稳定，坏处就是6000个原子以上我就生成不出来了，也就是规模十分有限。今天重点来讲解Antiprism使用。</p><h2 id="Antiprism使用"><a href="#Antiprism使用" class="headerlink" title="Antiprism使用"></a>Antiprism使用</h2><p>它的官网显示windows下可以直接使用，但是当你下载.exe文件时候，好家伙，直接没有，无奈我先是安装了他的python包，安装完以后使用过程的语法，好像是有点不对劲，生成的东西不对，也可能是我没有用对吧，最后我是用他的linux版本生成的。真的，这个软件的文档好难理解，甚至我感觉有些像是隐藏参数，so hard.</p><ul><li>安装linux版本的Antiprism<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:antiprism/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install antiprism</span><br></pre></td></tr></table></figure>安装过程中显示有些包没有更新或者已经没有用不影响最终的使用，我这里是使用WSl来安装的，没有可视化。</li><li>生成一个较大的GP(27,25)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geodesic -c 27,25 ico | pol_recip | canonical &gt; G27-25.off</span><br></pre></td></tr></table></figure>其中27，25就是m和n，这几个命令具体意思可以在官网查看，不过真的不是很好理解。如下图这样就是运行成功了。<br><img src="https://img.pterclub.com/images/2022/08/17/1660715991038.png" alt="shell运行结果"></li><li>转换生成的.off文件为MD文件<br>这里我们只需要他的坐标文件，而且需要进行缩放来使得初始的C-C键长大致在0.142nm，我写了一个简单的python脚本来转换为data文件，这种格式在<a href="https://www.lammps.org/">LAMMPS</a>中很方便使用。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> freud <span class="comment"># conda install -c conda-forge freud 很好用的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">off2data</span>(<span class="params">iname</span>):</span><br><span class="line">    file = <span class="built_in">open</span>(iname).readlines() <span class="comment"># 读取文件</span></span><br><span class="line">    N = <span class="built_in">int</span>(file[<span class="number">1</span>].split()[<span class="number">0</span>])</span><br><span class="line">    pos = np.array([i.split() <span class="keyword">for</span> i <span class="keyword">in</span> file[<span class="number">2</span>:<span class="number">2</span>+N]],dtype=<span class="built_in">float</span>) <span class="comment"># 获取原始坐标</span></span><br><span class="line">    Lbox = np.<span class="built_in">max</span>(pos,axis=<span class="number">0</span>)-np.<span class="built_in">min</span>(pos, axis=<span class="number">0</span>)</span><br><span class="line">    box = freud.box.Box(*Lbox*<span class="number">1.5</span>)</span><br><span class="line">    nlist = freud.locality.AABBQuery(box, pos).query(pos, <span class="built_in">dict</span>(num_neighbors=<span class="number">3</span>, exclude_ii=<span class="literal">True</span>)).toNeighborList()</span><br><span class="line">    avebond = np.mean(nlist.distances) <span class="comment"># 计算平均C-C键长</span></span><br><span class="line">    factor = <span class="number">1.42</span>/avebond</span><br><span class="line">    pos *=factor <span class="comment"># 缩放原始坐标</span></span><br><span class="line">    pos -= np.mean(pos, axis=<span class="number">0</span>) <span class="comment"># 质心平移至原点</span></span><br><span class="line">    df = pd.DataFrame(pos, columns=[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">    df[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    df[<span class="string">&#x27;idx&#x27;</span>] = np.arange(<span class="built_in">len</span>(df))+<span class="number">1</span></span><br><span class="line">    df = df[[<span class="string">&#x27;idx&#x27;</span>,<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]]</span><br><span class="line">    lo = np.<span class="built_in">min</span>(pos, axis=<span class="number">0</span>)-<span class="number">20</span></span><br><span class="line">    hi = np.<span class="built_in">max</span>(pos, axis=<span class="number">0</span>)+<span class="number">20</span></span><br><span class="line">    oname = iname.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.data&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(oname, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> op: <span class="comment"># 写入data文件</span></span><br><span class="line">        op.write(<span class="string">f&#x27;# <span class="subst">&#123;oname&#125;</span> written by HerrWu.\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">len</span>(pos)&#125;</span> atoms\n1 atom types\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;<span class="subst">&#123;lo[<span class="number">0</span>]&#125;</span> <span class="subst">&#123;hi[<span class="number">0</span>]&#125;</span> xlo xhi\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;<span class="subst">&#123;lo[<span class="number">1</span>]&#125;</span> <span class="subst">&#123;hi[<span class="number">1</span>]&#125;</span> ylo yhi\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">f&#x27;<span class="subst">&#123;lo[<span class="number">2</span>]&#125;</span> <span class="subst">&#123;hi[<span class="number">2</span>]&#125;</span> zlo zhi\n\n&#x27;</span>)</span><br><span class="line">        op.write(<span class="string">&#x27;Atoms # atomic\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    df.to_csv(oname, sep = <span class="string">&#x27; &#x27;</span>,index=<span class="literal">False</span>, header=<span class="literal">None</span>, mode=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    iname = <span class="string">&#x27;G27-25.off&#x27;</span></span><br><span class="line">    off2data(iname)</span><br></pre></td></tr></table></figure></li><li>使用<a href="https://www.ovito.org/">Ovito</a>可视化生成的构型<br>使用Ovito打开.data文件以后，使用create_bonds，这里对于五边形的部分应该单独做处理的，我就简单直接看了。<br><img src="https://img.pterclub.com/images/2022/08/17/gra_ball.png" alt="全局示意图" border="0" width="60%/"><img src="https://img.pterclub.com/images/2022/08/17/local.png" alt="局部放大图" border="0" width="60%/"><h2 id="初始构型弛豫"><a href="#初始构型弛豫" class="headerlink" title="初始构型弛豫"></a>初始构型弛豫</h2>使用LAMMPS来进行初始的构型弛豫，in文件如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">dimension 3</span><br><span class="line">units metal</span><br><span class="line">boundary p p p</span><br><span class="line">atom_style atomic</span><br><span class="line"></span><br><span class="line">read_data ./G27-25.data </span><br><span class="line"></span><br><span class="line">neighbor 1.0 bin</span><br><span class="line">neigh_modify every 5 delay 0 check yes</span><br><span class="line"></span><br><span class="line">mass 1 12.010700</span><br><span class="line">pair_style airebo/morse 3.0 1 </span><br><span class="line">pair_coeff * * ./CH.airebo-m C</span><br><span class="line"></span><br><span class="line">timestep 0.001</span><br><span class="line">shell mkdir minimize</span><br><span class="line">dump mini all custom 100 minimize/mini.*.dump id type x y z vx vy vz</span><br><span class="line">min_style cg</span><br><span class="line">minimize 1.0e-8 1.0e-8 10000 10000</span><br><span class="line">undump mini </span><br><span class="line">reset_timestep 0 </span><br><span class="line"></span><br><span class="line">variable Press equal press</span><br><span class="line">variable Temp equal temp</span><br><span class="line">variable Step equal step</span><br><span class="line">variable PE equal pe</span><br><span class="line"></span><br><span class="line">thermo 100</span><br><span class="line">thermo_style custom step temp press pe ke</span><br><span class="line"></span><br><span class="line">velocity all create 300 429816734892 dist gaussian mom yes rot yes</span><br><span class="line"></span><br><span class="line">fix 1 all nvt temp 300 300 0.5</span><br><span class="line"></span><br><span class="line">fix 2 all print 100 &quot;$&#123;Step&#125; $&#123;Temp&#125; $&#123;Press&#125; $&#123;PE&#125;&quot; file relax.txt screen no title &quot;Step Temp Press PE&quot;</span><br><span class="line">shell mkdir relax</span><br><span class="line">dump 1 all custom 100 relax/relax.*.dump id type x y z vx vy vz</span><br><span class="line"></span><br><span class="line">run 20000</span><br></pre></td></tr></table></figure></li><li>能量最小化过程<br><img src="https://img.pterclub.com/images/2022/08/17/rr9nf-828hs.gif" alt="能量最小化过程" border="0" width="60%/"></li><li>弛豫过程<br>可以看到石墨烯的褶皱是从最开始的十二个五边形区域开始扩展的，最后逐渐演变为一个二十面体，其截面就是一个六边形，这与<a href="https://doi.org/10.1016/j.carbon.2021.06.067">Yang et al.</a>文章中的结果相吻合。<br><img src="https://img.pterclub.com/images/2022/08/17/relax.png" alt="弛豫后构型" border="0" width="60%/"></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次我们建立了球状的石墨烯，并对其进行了弛豫，下一篇文章我们来将这个球状石墨烯进行组装，并与金属基体进行复合。</p>]]></content>
      
      
      <categories>
          
          <category> 分子动力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分子动力学 </tag>
            
            <tag> Lammps </tag>
            
            <tag> 石墨烯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Gallery</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="我的香宝"><a href="#我的香宝" class="headerlink" title="我的香宝"></a>我的香宝</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=255667&auto=0&height=66"></iframe><div class="fj-gallery"><p><img src="https://ptpimg.me/c58f56.jpg" alt><br><img src="https://ptpimg.me/984qel.jpg" alt><br><img src="https://ptpimg.me/c4a8p1.jpg" alt><br><img src="https://ptpimg.me/d3t4ek.jpg" alt></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/aside-count.css"/>
      <url>/css/aside-count.css</url>
      
        <content type="html"><![CDATA[/*人生倒计时侧边栏*/.aside-count .content .item {    margin-bottom: 15px;    line-height: initial;}.aside-count .content .item:last-child {    margin-bottom: 0} .aside-count .content .item .title {    font-size: 12px;    color: var(--minor);    display: flex;    align-items: center} .aside-count .content .item .title span {    color: var(--theme);    font-weight: 500;    font-size: 14px;    margin: 0 5px} .aside-count .content .item .progress {    display: flex;    align-items: center} .aside-count .content .item .progress .progress-bar {    height: 10px;    border-radius: 5px;    overflow: hidden;    background: var(--classC);    width: 0;    min-width: 0;    flex: 1;    margin-right: 5px}@keyframes progress {    0% {        background-position: 0 0    }     100% {        background-position: 30px 0    }}.aside-count .content .item .progress .progress-bar .progress-inner {    width: 0;    height: 100%;    border-radius: 5px;    transition: width 0.35s;    -webkit-animation: progress 750ms linear infinite;    animation: progress 750ms linear infinite} .aside-count .content .item .progress .progress-bar .progress-inner-1 {    background: #bde6ff;    background-image: linear-gradient(135deg, #50bfff 25%, transparent 25%, transparent 50%, #50bfff 50%, #50bfff 75%, transparent 75%, transparent 100%);    background-size: 30px 30px} .aside-count .content .item .progress .progress-bar .progress-inner-2 {    background: #ffd980;    background-image: linear-gradient(135deg, #f7ba2a 25%, transparent 25%, transparent 50%, #f7ba2a 50%, #f7ba2a 75%, transparent 75%, transparent 100%);    background-size: 30px 30px} .aside-count .content .item .progress .progress-bar .progress-inner-3 {    background: #ffa9a9;    background-image: linear-gradient(135deg, #ff4949 25%, transparent 25%, transparent 50%, #ff4949 50%, #ff4949 75%, transparent 75%, transparent 100%);    background-size: 30px 30px} .aside-count .content .item .progress .progress-bar .progress-inner-4 {    background: #67c23a;    background-image: linear-gradient(135deg, #4f9e28 25%, transparent 25%, transparent 50%, #4f9e28 50%, #4f9e28 75%, transparent 75%, transparent 100%);    background-size: 30px 30px}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/double.css"/>
      <url>/css/double.css</url>
      
        <content type="html"><![CDATA[/*首页文章双栏布局*/@media screen and (min-width: 1300px) {    #recent-posts {        margin-top: -1.25rem;/*第一排间距调整，若有磁贴或日历请注释掉该行*/        align-content: flex-start;        display: flex;        flex-wrap: wrap;/*规定灵活的项目在必要的时候拆行或拆列。*/        justify-content: space-between;        width: 80%;    }    #recent-posts>.recent-post-item {        margin-top: 1.25rem;/*左边第一列间距调整*/        display: flex;        flex-direction: row;        height: 15em;/*文章容器容器高度*/        width: 49.5%;/*文章容器容器宽度*/    }    #recent-posts>.recent-post-item .post_cover {        width: 40%;/*图片封面宽度*/        height: 100%;/*图片封面高度*/    }    #recent-posts>.recent-post-item .post_cover img.post_bg {        width: 100%;/*图片宽度*/        height: 100%;/*图片高度*/    }    #recent-posts>.recent-post-item .left_radius {        border-radius: 8px 8px 0 0;/*圆角修改*/    }    #recent-posts>.recent-post-item .right_radius {        border-radius: 8px 8px 0 0;/*圆角修改*/    }    .recent-post-info {        padding: 0 20px!important;/*文字容器左右间距*/        margin-top: 1em;/*文字容器上间距*/        width: 60% !important;/*文字容器宽度*/    }    #recent-posts>.recent-post-item>.recent-post-info>.article-meta-wrap {        margin-bottom: 1rem;/*控制标题meta信息的底部间距*/    }    /*底部页码导航居中*/    #pagination {        overflow: hidden;        margin-top: 1rem;        width: 100%;    }    /*内页容器加宽*/    .layout#content-inner {        max-width: 1450px;    }    #aside-content {        width: 20%;        padding-left: 0.8rem;/*侧边栏与首页文章容器距离*/    }    /*文章内页居中显示*/    .layout {        display: flex;        justify-content: center;        padding: .5rem 1.5rem;    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/clock.min.css"/>
      <url>/css/clock.min.css</url>
      
        <content type="html"><![CDATA[@font-face{font-family:UnidreamLED;src:url(https://cdn.cbd.int/anzhiyu-blog/fonts/UnidreamLED.ttf);font-display:swap}.card-clock-location,.card-clock-windDir,span.card-clock-weather{font-family:ZhuZiAYuanJWD}span.temp{font-family:UnidreamLED}#hexo_electric_clock{padding:20px}.card-clock{padding:0!important}.card-background{height:153px;margin:15px;border-radius:8px;box-shadow:inset 0 0 4px 2px rgb(145 148 154 / 40%);z-index:2}.clock-row{font-family:UnidreamLED;font-weight:400;color:#000;display:flex;justify-content:space-between;flex-wrap:nowrap;white-space:nowrap}.card-clock-clockdate,.card-clock-ip{text-align:left}.card-clock-location,.card-clock-weather{text-align:center}.card-clock-dackorlight,.card-clock-humidity{text-align:right}.card-clock-time{flex:1;font-family:UnidreamLED;font-size:38px;text-align:center;line-height:1.5}[data-theme=dark] .card-background{background-color:#212121}[data-theme=dark] .clock-row{color:#fff}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.min.css"/>
      <url>/css/runtime.min.css</url>
      
        <content type="html"><![CDATA[div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/aside-count.js"/>
      <url>/js/aside-count.js</url>
      
        <content type="html"><![CDATA[function init_life_time() {    function getAsideLifeTime() {        let nowDate = +new Date();        let todayStartDate = new Date(new Date().toLocaleDateString()).getTime();        let todayPassHours = (nowDate - todayStartDate) / 1000 / 60 / 60;        let todayPassHoursPercent = (todayPassHours / 24) * 100;        $('#dayProgress .title span').html(parseInt(todayPassHours));        $('#dayProgress .progress .progress-inner').css('width', parseInt(todayPassHoursPercent) + '%');        $('#dayProgress .progress .progress-percentage').html(parseInt(todayPassHoursPercent) + '%');        let weeks = {            0: 7,            1: 1,            2: 2,            3: 3,            4: 4,            5: 5,            6: 6        };        let weekDay = weeks[new Date().getDay()];        let weekDayPassPercent = (weekDay / 7) * 100;        $('#weekProgress .title span').html(weekDay);        $('#weekProgress .progress .progress-inner').css('width', parseInt(weekDayPassPercent) + '%');        $('#weekProgress .progress .progress-percentage').html(parseInt(weekDayPassPercent) + '%');        let year = new Date().getFullYear();        let date = new Date().getDate();        let month = new Date().getMonth() + 1;        let monthAll = new Date(year, month, 0).getDate();        let monthPassPercent = (date / monthAll) * 100;        $('#monthProgress .title span').html(date);        $('#monthProgress .progress .progress-inner').css('width', parseInt(monthPassPercent) + '%');        $('#monthProgress .progress .progress-percentage').html(parseInt(monthPassPercent) + '%');        let yearPass = (month / 12) * 100;        $('#yearProgress .title span').html(month);        $('#yearProgress .progress .progress-inner').css('width', parseInt(yearPass) + '%');        $('#yearProgress .progress .progress-percentage').html(parseInt(yearPass) + '%');    }    getAsideLifeTime();    setInterval(() => {        getAsideLifeTime();    }, 1000);}init_life_time()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/mouse_snow.js"/>
      <url>/js/mouse_snow.js</url>
      
        <content type="html"><![CDATA[(function(){function t(){i(),a()}function i(){document.addEventListener("mousemove",o),document.addEventListener("touchmove",e),document.addEventListener("touchstart",e),window.addEventListener("resize",n)}function n(t){d=window.innerWidth,window.innerHeight}function e(t){if(t.touches.length>0)for(var i=0;i<t.touches.length;i++)s(t.touches[i].clientX,t.touches[i].clientY,r[Math.floor(Math.random()*r.length)])}function o(t){u.x="t.clientX,u.y=t.clientY,s(u.x,u.y,r[Math.floor(Math.random()*r.length)])}function" s(t,i,n){var e="new" l;e.init(t,i,n),f.push(e)}function h(){for(var t="0;t<f.length;t++)f[t].update();for(t=f.length-1;t">=0;t--)f[t].lifeSpan</t.touches.length;i++)s(t.touches[i].clientX,t.touches[i].clientY,r[Math.floor(Math.random()*r.length)])}function>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/clock.js"/>
      <url>/js/clock.js</url>
      
        <content type="html"><![CDATA[function getIpInfo(){fetch("https://restapi.amap.com/v3/ip?key=e2b04289e870b005374ee030148d64fd&s=rsv3").then((c=>c.json())).then((c=>{fetch(`https://devapi.qweather.com/v7/weather/now?location=${c.rectangle.split(";")[0]}&key=b16a1fa0e63c46a4b8f28abfb06ae3fe`).then((c=>c.json())).then((e=>{if(document.getElementById("hexo_electric_clock")){var a=c,s=e,n=document.getElementById("hexo_electric_clock");let r="#000";switch(s.now.icon){case"100":r="#fdcc45";break;case"101":r="#fe6976";break;case"102":case"103":r="#fe7f5b";break;case"104":case"150":case"151":case"152":case"153":case"154":case"800":case"801":case"802":case"803":case"804":case"805":case"806":case"807":r="#2152d1";break;case"300":case"301":case"305":case"306":case"307":case"308":case"309":case"310":case"311":case"312":case"313":case"314":case"315":case"316":case"317":case"318":case"350":case"351":case"399":r="#49b1f5";break;case"302":case"303":case"304":r="#fdcc46";break;case"400":case"401":case"402":case"403":case"404":case"405":case"406":case"407":case"408":case"409":case"410":case"456":case"457":case"499":r="#a3c2dc";break;case"500":case"501":case"502":case"503":case"504":case"507":case"508":case"509":case"510":case"511":case"512":case"513":case"514":case"515":r="#97acba";break;case"900":case"999":r="red";break;case"901":r="#179fff;"}clock_box_html=`\n            <div class="clock-row">\n              <span id="card-clock-clockdate" class="card-clock-clockdate"></span>\n              <span class="card-clock-weather"><i class="qi-${s.now.icon}-fill" style="color: ${r}"></i> ${s.now.text} <span>${s.now.temp}</span> ℃</span>\n              <span class="card-clock-humidity">💧 ${s.now.humidity}%</span>\n            </div>\n            <div class="clock-row">\n              <span id="card-clock-time" class="card-clock-time"></span>\n            </div>\n            <div class="clock-row">\n              <span class="card-clock-windDir"> <i class="qi-gale"></i> ${s.now.windDir}</span>\n              <span class="card-clock-location">${a.city}</span>\n              <span id="card-clock-dackorlight" class="card-clock-dackorlight"></span>\n            </div>\n            `;var t=["SUN","MON","TUE","WED","THU","FRI","SAT"];function o(){var c,e=new Date,a=l(e.getHours(),2)+":"+l(e.getMinutes(),2)+":"+l(e.getSeconds(),2),s=l(e.getFullYear(),4)+"-"+l(e.getMonth()+1,2)+"-"+l(e.getDate(),2)+" "+t[e.getDay()],n=e.getHours();if(n>12?(n-=12,c=" P M"):c=" A M",document.getElementById("card-clock-time")){var o=document.getElementById("card-clock-time"),r=document.getElementById("card-clock-clockdate"),d=document.getElementById("card-clock-dackorlight");o.innerHTML=a,r.innerHTML=s,d.innerHTML=c}}function l(c,e){for(var a="",s=0;s]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: 'ZhuZiAYuanJWD';  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #49b1f5;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }  /* 全局默认鼠标指针 */body,html{  cursor: url('/img/arrow.cur'),auto !important;}/* 悬停图片时的鼠标指针 */img{  cursor: url('/img/hand.cur'),auto !important;}/* 选择链接标签时的鼠标指针 */a:hover{    cursor: url('/img/link.cur'),auto;}/* 选中输入框时的鼠标指针 */input:hover{    cursor: url('/img/text.cur'),auto;}/* 悬停按钮时的鼠标指针 */button:hover{    cursor: url('/img/hand.cur'),auto;}/* 悬停列表标签时的鼠标指针 */i:hover{    cursor: url('/img/link.cur'),auto;}  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.min.js"/>
      <url>/js/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var e=new Date("08/14/2022 00:00:00");now.setTime(now.getTime()+250);var t=(now-e)/1e3/60/60/24,a=Math.floor(t),n=(now-e)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-e)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-e)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class="boardsign" src="/js/runtime.min.j/HerrWu-在嘎嘎学习-blue.svg" title="在知识的海洋遨游ing~"><span class="textTip"> <br> 本站居然已经唯唯诺诺地运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`:`<img class="boardsign" src="/js/runtime.min.j/HerrWu-摸鱼去了-blue.svg" title="今天就先开溜了~"><span class="textTip"> <br> 本站居然已经唯唯诺诺地运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);</18&&r>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = 'w(ﾟДﾟ)w 有本事别走！';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '♪(^∇^*) 回来就好！' + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/timing.js"/>
      <url>/js/timing.js</url>
      
        <content type="html"><![CDATA[let message = document.getElementsByTagName("timing")[0];message.style.color = "red"; //设置颜色var starttime = new Date("2020/08/23 00:00:00"); //设置目标日期function showTime(){var stime = new Date();var time = stime - starttime;if(time > 0){var day = Math.floor(time/1000/3600/24); var hour = Math.floor(time%(3600*24*1000)/1000/3600);var min = Math.floor(time%(3600*24*1000)/1000%3600/60);var sec = Math.floor(time%(3600*24*1000)/1000%3600%60);var str ='我们已经相恋了'+day+'天'+hour+'小时'+min+'分钟'+sec+'秒'; //设置字符串message.innerHTML = str;}}setInterval(showTime,1000);]]></content>
      
    </entry>
    
    
  
</search>
